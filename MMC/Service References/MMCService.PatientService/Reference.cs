//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MMC.MMCService.PatientService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Patient", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO")]
    [System.SerializableAttribute()]
    public partial class Patient : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatAddress1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatAddress2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatAgeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatClaimNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PatDOBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PatDOIField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatEMailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatEthnicBackgroundField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatFaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatFirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatGenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatLastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatMaritalStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatMedicareEligibleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatPhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatPrimaryLanguageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatSSNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatSecondaryLanguageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatStateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatStateNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatZipField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientClaimIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatAddress1 {
            get {
                return this.PatAddress1Field;
            }
            set {
                if ((object.ReferenceEquals(this.PatAddress1Field, value) != true)) {
                    this.PatAddress1Field = value;
                    this.RaisePropertyChanged("PatAddress1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatAddress2 {
            get {
                return this.PatAddress2Field;
            }
            set {
                if ((object.ReferenceEquals(this.PatAddress2Field, value) != true)) {
                    this.PatAddress2Field = value;
                    this.RaisePropertyChanged("PatAddress2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatAge {
            get {
                return this.PatAgeField;
            }
            set {
                if ((this.PatAgeField.Equals(value) != true)) {
                    this.PatAgeField = value;
                    this.RaisePropertyChanged("PatAge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatCity {
            get {
                return this.PatCityField;
            }
            set {
                if ((object.ReferenceEquals(this.PatCityField, value) != true)) {
                    this.PatCityField = value;
                    this.RaisePropertyChanged("PatCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatClaimNumber {
            get {
                return this.PatClaimNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PatClaimNumberField, value) != true)) {
                    this.PatClaimNumberField = value;
                    this.RaisePropertyChanged("PatClaimNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PatDOB {
            get {
                return this.PatDOBField;
            }
            set {
                if ((this.PatDOBField.Equals(value) != true)) {
                    this.PatDOBField = value;
                    this.RaisePropertyChanged("PatDOB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PatDOI {
            get {
                return this.PatDOIField;
            }
            set {
                if ((this.PatDOIField.Equals(value) != true)) {
                    this.PatDOIField = value;
                    this.RaisePropertyChanged("PatDOI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatEMail {
            get {
                return this.PatEMailField;
            }
            set {
                if ((object.ReferenceEquals(this.PatEMailField, value) != true)) {
                    this.PatEMailField = value;
                    this.RaisePropertyChanged("PatEMail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatEthnicBackground {
            get {
                return this.PatEthnicBackgroundField;
            }
            set {
                if ((object.ReferenceEquals(this.PatEthnicBackgroundField, value) != true)) {
                    this.PatEthnicBackgroundField = value;
                    this.RaisePropertyChanged("PatEthnicBackground");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatFax {
            get {
                return this.PatFaxField;
            }
            set {
                if ((object.ReferenceEquals(this.PatFaxField, value) != true)) {
                    this.PatFaxField = value;
                    this.RaisePropertyChanged("PatFax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatFirstName {
            get {
                return this.PatFirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatFirstNameField, value) != true)) {
                    this.PatFirstNameField = value;
                    this.RaisePropertyChanged("PatFirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatGender {
            get {
                return this.PatGenderField;
            }
            set {
                if ((object.ReferenceEquals(this.PatGenderField, value) != true)) {
                    this.PatGenderField = value;
                    this.RaisePropertyChanged("PatGender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatLastName {
            get {
                return this.PatLastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatLastNameField, value) != true)) {
                    this.PatLastNameField = value;
                    this.RaisePropertyChanged("PatLastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatMaritalStatus {
            get {
                return this.PatMaritalStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.PatMaritalStatusField, value) != true)) {
                    this.PatMaritalStatusField = value;
                    this.RaisePropertyChanged("PatMaritalStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatMedicareEligible {
            get {
                return this.PatMedicareEligibleField;
            }
            set {
                if ((object.ReferenceEquals(this.PatMedicareEligibleField, value) != true)) {
                    this.PatMedicareEligibleField = value;
                    this.RaisePropertyChanged("PatMedicareEligible");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatPhone {
            get {
                return this.PatPhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PatPhoneField, value) != true)) {
                    this.PatPhoneField = value;
                    this.RaisePropertyChanged("PatPhone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatPrimaryLanguageId {
            get {
                return this.PatPrimaryLanguageIdField;
            }
            set {
                if ((this.PatPrimaryLanguageIdField.Equals(value) != true)) {
                    this.PatPrimaryLanguageIdField = value;
                    this.RaisePropertyChanged("PatPrimaryLanguageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatSSN {
            get {
                return this.PatSSNField;
            }
            set {
                if ((object.ReferenceEquals(this.PatSSNField, value) != true)) {
                    this.PatSSNField = value;
                    this.RaisePropertyChanged("PatSSN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatSecondaryLanguageId {
            get {
                return this.PatSecondaryLanguageIdField;
            }
            set {
                if ((this.PatSecondaryLanguageIdField.Equals(value) != true)) {
                    this.PatSecondaryLanguageIdField = value;
                    this.RaisePropertyChanged("PatSecondaryLanguageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatStateId {
            get {
                return this.PatStateIdField;
            }
            set {
                if ((this.PatStateIdField.Equals(value) != true)) {
                    this.PatStateIdField = value;
                    this.RaisePropertyChanged("PatStateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatStateName {
            get {
                return this.PatStateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatStateNameField, value) != true)) {
                    this.PatStateNameField = value;
                    this.RaisePropertyChanged("PatStateName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatZip {
            get {
                return this.PatZipField;
            }
            set {
                if ((object.ReferenceEquals(this.PatZipField, value) != true)) {
                    this.PatZipField = value;
                    this.RaisePropertyChanged("PatZip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientClaimID {
            get {
                return this.PatientClaimIDField;
            }
            set {
                if ((this.PatientClaimIDField.Equals(value) != true)) {
                    this.PatientClaimIDField = value;
                    this.RaisePropertyChanged("PatientClaimID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientID {
            get {
                return this.PatientIDField;
            }
            set {
                if ((this.PatientIDField.Equals(value) != true)) {
                    this.PatientIDField = value;
                    this.RaisePropertyChanged("PatientID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedPatient", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedPatient : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MMC.MMCService.PatientService.Patient[] PatientDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MMC.MMCService.PatientService.Patient[] PatientDetails {
            get {
                return this.PatientDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientDetailsField, value) != true)) {
                    this.PatientDetailsField = value;
                    this.RaisePropertyChanged("PatientDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientCurrentMedicalCondition", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO")]
    [System.SerializableAttribute()]
    public partial class PatientCurrentMedicalCondition : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrentMedicalConditionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatCurrentMedicalConditionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatCurrentMedicalConditionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrentMedicalConditionId {
            get {
                return this.CurrentMedicalConditionIdField;
            }
            set {
                if ((this.CurrentMedicalConditionIdField.Equals(value) != true)) {
                    this.CurrentMedicalConditionIdField = value;
                    this.RaisePropertyChanged("CurrentMedicalConditionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatCurrentMedicalConditionId {
            get {
                return this.PatCurrentMedicalConditionIdField;
            }
            set {
                if ((this.PatCurrentMedicalConditionIdField.Equals(value) != true)) {
                    this.PatCurrentMedicalConditionIdField = value;
                    this.RaisePropertyChanged("PatCurrentMedicalConditionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatCurrentMedicalConditionName {
            get {
                return this.PatCurrentMedicalConditionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatCurrentMedicalConditionNameField, value) != true)) {
                    this.PatCurrentMedicalConditionNameField = value;
                    this.RaisePropertyChanged("PatCurrentMedicalConditionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientID {
            get {
                return this.PatientIDField;
            }
            set {
                if ((this.PatientIDField.Equals(value) != true)) {
                    this.PatientIDField = value;
                    this.RaisePropertyChanged("PatientID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedPatientCurrentMedicalCondition", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedPatientCurrentMedicalCondition : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MMC.MMCService.PatientService.PatientCurrentMedicalCondition[] PatientCurrentMedicalConditionDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MMC.MMCService.PatientService.PatientCurrentMedicalCondition[] PatientCurrentMedicalConditionDetails {
            get {
                return this.PatientCurrentMedicalConditionDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientCurrentMedicalConditionDetailsField, value) != true)) {
                    this.PatientCurrentMedicalConditionDetailsField = value;
                    this.RaisePropertyChanged("PatientCurrentMedicalConditionDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientClaim", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO")]
    [System.SerializableAttribute()]
    public partial class PatientClaim : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClaimAdministratorNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClaimStatusIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeniedRationaleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PatADRIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatAdjudicationStateCaseNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatAdjusterIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PatApplicantAttorneyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PatCaseManagerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatClaimJurisdictionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatClaimNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatClientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PatDOIField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PatDefenseAttorneyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatEDIExchangeTrackingNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatEmpSubsidiaryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatEmployerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PatInjuryReportedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatInsValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PatInsuranceBranchIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PatInsurerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PatPhysicianIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatPolicyYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PatTPABranchIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PatTPAIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatTPAValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientClaimIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientClaimStatusIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClaimAdministratorName {
            get {
                return this.ClaimAdministratorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClaimAdministratorNameField, value) != true)) {
                    this.ClaimAdministratorNameField = value;
                    this.RaisePropertyChanged("ClaimAdministratorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClaimStatusID {
            get {
                return this.ClaimStatusIDField;
            }
            set {
                if ((this.ClaimStatusIDField.Equals(value) != true)) {
                    this.ClaimStatusIDField = value;
                    this.RaisePropertyChanged("ClaimStatusID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientName {
            get {
                return this.ClientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientNameField, value) != true)) {
                    this.ClientNameField = value;
                    this.RaisePropertyChanged("ClientName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeniedRationale {
            get {
                return this.DeniedRationaleField;
            }
            set {
                if ((object.ReferenceEquals(this.DeniedRationaleField, value) != true)) {
                    this.DeniedRationaleField = value;
                    this.RaisePropertyChanged("DeniedRationale");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PatADRID {
            get {
                return this.PatADRIDField;
            }
            set {
                if ((this.PatADRIDField.Equals(value) != true)) {
                    this.PatADRIDField = value;
                    this.RaisePropertyChanged("PatADRID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatAdjudicationStateCaseNumber {
            get {
                return this.PatAdjudicationStateCaseNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PatAdjudicationStateCaseNumberField, value) != true)) {
                    this.PatAdjudicationStateCaseNumberField = value;
                    this.RaisePropertyChanged("PatAdjudicationStateCaseNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatAdjusterID {
            get {
                return this.PatAdjusterIDField;
            }
            set {
                if ((this.PatAdjusterIDField.Equals(value) != true)) {
                    this.PatAdjusterIDField = value;
                    this.RaisePropertyChanged("PatAdjusterID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PatApplicantAttorneyID {
            get {
                return this.PatApplicantAttorneyIDField;
            }
            set {
                if ((this.PatApplicantAttorneyIDField.Equals(value) != true)) {
                    this.PatApplicantAttorneyIDField = value;
                    this.RaisePropertyChanged("PatApplicantAttorneyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PatCaseManagerID {
            get {
                return this.PatCaseManagerIDField;
            }
            set {
                if ((this.PatCaseManagerIDField.Equals(value) != true)) {
                    this.PatCaseManagerIDField = value;
                    this.RaisePropertyChanged("PatCaseManagerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatClaimJurisdictionId {
            get {
                return this.PatClaimJurisdictionIdField;
            }
            set {
                if ((this.PatClaimJurisdictionIdField.Equals(value) != true)) {
                    this.PatClaimJurisdictionIdField = value;
                    this.RaisePropertyChanged("PatClaimJurisdictionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatClaimNumber {
            get {
                return this.PatClaimNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PatClaimNumberField, value) != true)) {
                    this.PatClaimNumberField = value;
                    this.RaisePropertyChanged("PatClaimNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatClientID {
            get {
                return this.PatClientIDField;
            }
            set {
                if ((this.PatClientIDField.Equals(value) != true)) {
                    this.PatClientIDField = value;
                    this.RaisePropertyChanged("PatClientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PatDOI {
            get {
                return this.PatDOIField;
            }
            set {
                if ((this.PatDOIField.Equals(value) != true)) {
                    this.PatDOIField = value;
                    this.RaisePropertyChanged("PatDOI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PatDefenseAttorneyID {
            get {
                return this.PatDefenseAttorneyIDField;
            }
            set {
                if ((this.PatDefenseAttorneyIDField.Equals(value) != true)) {
                    this.PatDefenseAttorneyIDField = value;
                    this.RaisePropertyChanged("PatDefenseAttorneyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatEDIExchangeTrackingNumber {
            get {
                return this.PatEDIExchangeTrackingNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PatEDIExchangeTrackingNumberField, value) != true)) {
                    this.PatEDIExchangeTrackingNumberField = value;
                    this.RaisePropertyChanged("PatEDIExchangeTrackingNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatEmpSubsidiaryID {
            get {
                return this.PatEmpSubsidiaryIDField;
            }
            set {
                if ((this.PatEmpSubsidiaryIDField.Equals(value) != true)) {
                    this.PatEmpSubsidiaryIDField = value;
                    this.RaisePropertyChanged("PatEmpSubsidiaryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatEmployerID {
            get {
                return this.PatEmployerIDField;
            }
            set {
                if ((this.PatEmployerIDField.Equals(value) != true)) {
                    this.PatEmployerIDField = value;
                    this.RaisePropertyChanged("PatEmployerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PatInjuryReportedDate {
            get {
                return this.PatInjuryReportedDateField;
            }
            set {
                if ((this.PatInjuryReportedDateField.Equals(value) != true)) {
                    this.PatInjuryReportedDateField = value;
                    this.RaisePropertyChanged("PatInjuryReportedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatInsValue {
            get {
                return this.PatInsValueField;
            }
            set {
                if ((object.ReferenceEquals(this.PatInsValueField, value) != true)) {
                    this.PatInsValueField = value;
                    this.RaisePropertyChanged("PatInsValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PatInsuranceBranchID {
            get {
                return this.PatInsuranceBranchIDField;
            }
            set {
                if ((this.PatInsuranceBranchIDField.Equals(value) != true)) {
                    this.PatInsuranceBranchIDField = value;
                    this.RaisePropertyChanged("PatInsuranceBranchID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PatInsurerID {
            get {
                return this.PatInsurerIDField;
            }
            set {
                if ((this.PatInsurerIDField.Equals(value) != true)) {
                    this.PatInsurerIDField = value;
                    this.RaisePropertyChanged("PatInsurerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PatPhysicianID {
            get {
                return this.PatPhysicianIDField;
            }
            set {
                if ((this.PatPhysicianIDField.Equals(value) != true)) {
                    this.PatPhysicianIDField = value;
                    this.RaisePropertyChanged("PatPhysicianID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatPolicyYear {
            get {
                return this.PatPolicyYearField;
            }
            set {
                if ((object.ReferenceEquals(this.PatPolicyYearField, value) != true)) {
                    this.PatPolicyYearField = value;
                    this.RaisePropertyChanged("PatPolicyYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PatTPABranchID {
            get {
                return this.PatTPABranchIDField;
            }
            set {
                if ((this.PatTPABranchIDField.Equals(value) != true)) {
                    this.PatTPABranchIDField = value;
                    this.RaisePropertyChanged("PatTPABranchID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PatTPAID {
            get {
                return this.PatTPAIDField;
            }
            set {
                if ((this.PatTPAIDField.Equals(value) != true)) {
                    this.PatTPAIDField = value;
                    this.RaisePropertyChanged("PatTPAID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatTPAValue {
            get {
                return this.PatTPAValueField;
            }
            set {
                if ((object.ReferenceEquals(this.PatTPAValueField, value) != true)) {
                    this.PatTPAValueField = value;
                    this.RaisePropertyChanged("PatTPAValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientClaimID {
            get {
                return this.PatientClaimIDField;
            }
            set {
                if ((this.PatientClaimIDField.Equals(value) != true)) {
                    this.PatientClaimIDField = value;
                    this.RaisePropertyChanged("PatientClaimID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientClaimStatusID {
            get {
                return this.PatientClaimStatusIDField;
            }
            set {
                if ((this.PatientClaimStatusIDField.Equals(value) != true)) {
                    this.PatientClaimStatusIDField = value;
                    this.RaisePropertyChanged("PatientClaimStatusID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientID {
            get {
                return this.PatientIDField;
            }
            set {
                if ((this.PatientIDField.Equals(value) != true)) {
                    this.PatientIDField = value;
                    this.RaisePropertyChanged("PatientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientName {
            get {
                return this.PatientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientNameField, value) != true)) {
                    this.PatientNameField = value;
                    this.RaisePropertyChanged("PatientName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedPatientClaim", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedPatientClaim : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MMC.MMCService.PatientService.PatientClaim[] PatientClaimDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MMC.MMCService.PatientService.PatientClaim[] PatientClaimDetails {
            get {
                return this.PatientClaimDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientClaimDetailsField, value) != true)) {
                    this.PatientClaimDetailsField = value;
                    this.RaisePropertyChanged("PatientClaimDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedPatientClaimBodyPartByBPStatusID", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedPatientClaimBodyPartByBPStatusID : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MMC.MMCService.PatientService.PatientClaimBodyPartByBPStatusID[] PatientClaimBodyPartByBPStatusIDDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MMC.MMCService.PatientService.PatientClaimBodyPartByBPStatusID[] PatientClaimBodyPartByBPStatusIDDetails {
            get {
                return this.PatientClaimBodyPartByBPStatusIDDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientClaimBodyPartByBPStatusIDDetailsField, value) != true)) {
                    this.PatientClaimBodyPartByBPStatusIDDetailsField = value;
                    this.RaisePropertyChanged("PatientClaimBodyPartByBPStatusIDDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientClaimBodyPartByBPStatusID", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO")]
    [System.SerializableAttribute()]
    public partial class PatientClaimBodyPartByBPStatusID : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BodyPartStatusIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientClaimBodtPartStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientClaimBodyPartIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientClaimIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TableNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BodyPartStatusID {
            get {
                return this.BodyPartStatusIDField;
            }
            set {
                if ((this.BodyPartStatusIDField.Equals(value) != true)) {
                    this.BodyPartStatusIDField = value;
                    this.RaisePropertyChanged("BodyPartStatusID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientClaimBodtPartStatus {
            get {
                return this.PatientClaimBodtPartStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientClaimBodtPartStatusField, value) != true)) {
                    this.PatientClaimBodtPartStatusField = value;
                    this.RaisePropertyChanged("PatientClaimBodtPartStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientClaimBodyPartID {
            get {
                return this.PatientClaimBodyPartIDField;
            }
            set {
                if ((this.PatientClaimBodyPartIDField.Equals(value) != true)) {
                    this.PatientClaimBodyPartIDField = value;
                    this.RaisePropertyChanged("PatientClaimBodyPartID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientClaimID {
            get {
                return this.PatientClaimIDField;
            }
            set {
                if ((this.PatientClaimIDField.Equals(value) != true)) {
                    this.PatientClaimIDField = value;
                    this.RaisePropertyChanged("PatientClaimID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TableName {
            get {
                return this.TableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TableNameField, value) != true)) {
                    this.TableNameField = value;
                    this.RaisePropertyChanged("TableName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientClaimAddOnBodyPart", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO")]
    [System.SerializableAttribute()]
    public partial class PatientClaimAddOnBodyPart : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> AcceptedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddOnBodyPartConditionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AddOnBodyPartIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BodyPartStatusIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatAddOnBodyPartConditionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatAddOnBodyPartNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatBodyPartStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientClaimAddOnBodyPartIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientClaimIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> AcceptedDate {
            get {
                return this.AcceptedDateField;
            }
            set {
                if ((this.AcceptedDateField.Equals(value) != true)) {
                    this.AcceptedDateField = value;
                    this.RaisePropertyChanged("AcceptedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AddOnBodyPartCondition {
            get {
                return this.AddOnBodyPartConditionField;
            }
            set {
                if ((object.ReferenceEquals(this.AddOnBodyPartConditionField, value) != true)) {
                    this.AddOnBodyPartConditionField = value;
                    this.RaisePropertyChanged("AddOnBodyPartCondition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AddOnBodyPartID {
            get {
                return this.AddOnBodyPartIDField;
            }
            set {
                if ((this.AddOnBodyPartIDField.Equals(value) != true)) {
                    this.AddOnBodyPartIDField = value;
                    this.RaisePropertyChanged("AddOnBodyPartID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BodyPartStatusID {
            get {
                return this.BodyPartStatusIDField;
            }
            set {
                if ((this.BodyPartStatusIDField.Equals(value) != true)) {
                    this.BodyPartStatusIDField = value;
                    this.RaisePropertyChanged("BodyPartStatusID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatAddOnBodyPartCondition {
            get {
                return this.PatAddOnBodyPartConditionField;
            }
            set {
                if ((object.ReferenceEquals(this.PatAddOnBodyPartConditionField, value) != true)) {
                    this.PatAddOnBodyPartConditionField = value;
                    this.RaisePropertyChanged("PatAddOnBodyPartCondition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatAddOnBodyPartName {
            get {
                return this.PatAddOnBodyPartNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatAddOnBodyPartNameField, value) != true)) {
                    this.PatAddOnBodyPartNameField = value;
                    this.RaisePropertyChanged("PatAddOnBodyPartName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatBodyPartStatusName {
            get {
                return this.PatBodyPartStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatBodyPartStatusNameField, value) != true)) {
                    this.PatBodyPartStatusNameField = value;
                    this.RaisePropertyChanged("PatBodyPartStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientClaimAddOnBodyPartID {
            get {
                return this.PatientClaimAddOnBodyPartIDField;
            }
            set {
                if ((this.PatientClaimAddOnBodyPartIDField.Equals(value) != true)) {
                    this.PatientClaimAddOnBodyPartIDField = value;
                    this.RaisePropertyChanged("PatientClaimAddOnBodyPartID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientClaimID {
            get {
                return this.PatientClaimIDField;
            }
            set {
                if ((this.PatientClaimIDField.Equals(value) != true)) {
                    this.PatientClaimIDField = value;
                    this.RaisePropertyChanged("PatientClaimID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedPatientClaimAddOnBodyPart", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedPatientClaimAddOnBodyPart : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MMC.MMCService.PatientService.PatientClaimAddOnBodyPart[] PatientClaimAddOnBodyPartDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MMC.MMCService.PatientService.PatientClaimAddOnBodyPart[] PatientClaimAddOnBodyPartDetails {
            get {
                return this.PatientClaimAddOnBodyPartDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientClaimAddOnBodyPartDetailsField, value) != true)) {
                    this.PatientClaimAddOnBodyPartDetailsField = value;
                    this.RaisePropertyChanged("PatientClaimAddOnBodyPartDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientClaimPleadBodyPart", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO")]
    [System.SerializableAttribute()]
    public partial class PatientClaimPleadBodyPart : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> AcceptedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BodyPartStatusIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatBodyPartStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatPleadBodyPartConditionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatPleadBodyPartNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientClaimIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientClaimPleadBodyPartIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PleadBodyPartConditionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PleadBodyPartIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> AcceptedDate {
            get {
                return this.AcceptedDateField;
            }
            set {
                if ((this.AcceptedDateField.Equals(value) != true)) {
                    this.AcceptedDateField = value;
                    this.RaisePropertyChanged("AcceptedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BodyPartStatusID {
            get {
                return this.BodyPartStatusIDField;
            }
            set {
                if ((this.BodyPartStatusIDField.Equals(value) != true)) {
                    this.BodyPartStatusIDField = value;
                    this.RaisePropertyChanged("BodyPartStatusID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatBodyPartStatusName {
            get {
                return this.PatBodyPartStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatBodyPartStatusNameField, value) != true)) {
                    this.PatBodyPartStatusNameField = value;
                    this.RaisePropertyChanged("PatBodyPartStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatPleadBodyPartCondition {
            get {
                return this.PatPleadBodyPartConditionField;
            }
            set {
                if ((object.ReferenceEquals(this.PatPleadBodyPartConditionField, value) != true)) {
                    this.PatPleadBodyPartConditionField = value;
                    this.RaisePropertyChanged("PatPleadBodyPartCondition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatPleadBodyPartName {
            get {
                return this.PatPleadBodyPartNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatPleadBodyPartNameField, value) != true)) {
                    this.PatPleadBodyPartNameField = value;
                    this.RaisePropertyChanged("PatPleadBodyPartName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientClaimID {
            get {
                return this.PatientClaimIDField;
            }
            set {
                if ((this.PatientClaimIDField.Equals(value) != true)) {
                    this.PatientClaimIDField = value;
                    this.RaisePropertyChanged("PatientClaimID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientClaimPleadBodyPartID {
            get {
                return this.PatientClaimPleadBodyPartIDField;
            }
            set {
                if ((this.PatientClaimPleadBodyPartIDField.Equals(value) != true)) {
                    this.PatientClaimPleadBodyPartIDField = value;
                    this.RaisePropertyChanged("PatientClaimPleadBodyPartID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PleadBodyPartCondition {
            get {
                return this.PleadBodyPartConditionField;
            }
            set {
                if ((object.ReferenceEquals(this.PleadBodyPartConditionField, value) != true)) {
                    this.PleadBodyPartConditionField = value;
                    this.RaisePropertyChanged("PleadBodyPartCondition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PleadBodyPartID {
            get {
                return this.PleadBodyPartIDField;
            }
            set {
                if ((this.PleadBodyPartIDField.Equals(value) != true)) {
                    this.PleadBodyPartIDField = value;
                    this.RaisePropertyChanged("PleadBodyPartID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedPatientClaimPleadBodyPart", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedPatientClaimPleadBodyPart : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MMC.MMCService.PatientService.PatientClaimPleadBodyPart[] PatientClaimPleadBodyPartDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MMC.MMCService.PatientService.PatientClaimPleadBodyPart[] PatientClaimPleadBodyPartDetails {
            get {
                return this.PatientClaimPleadBodyPartDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientClaimPleadBodyPartDetailsField, value) != true)) {
                    this.PatientClaimPleadBodyPartDetailsField = value;
                    this.RaisePropertyChanged("PatientClaimPleadBodyPartDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientClaimDiagnose", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO")]
    [System.SerializableAttribute()]
    public partial class PatientClaimDiagnose : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ICDDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientClaimDiagnosisIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientClaimIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string icdICDNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int icdICDNumberIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string icdICDTabField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ICDDescription {
            get {
                return this.ICDDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ICDDescriptionField, value) != true)) {
                    this.ICDDescriptionField = value;
                    this.RaisePropertyChanged("ICDDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientClaimDiagnosisID {
            get {
                return this.PatientClaimDiagnosisIDField;
            }
            set {
                if ((this.PatientClaimDiagnosisIDField.Equals(value) != true)) {
                    this.PatientClaimDiagnosisIDField = value;
                    this.RaisePropertyChanged("PatientClaimDiagnosisID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientClaimID {
            get {
                return this.PatientClaimIDField;
            }
            set {
                if ((this.PatientClaimIDField.Equals(value) != true)) {
                    this.PatientClaimIDField = value;
                    this.RaisePropertyChanged("PatientClaimID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string icdICDNumber {
            get {
                return this.icdICDNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.icdICDNumberField, value) != true)) {
                    this.icdICDNumberField = value;
                    this.RaisePropertyChanged("icdICDNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int icdICDNumberID {
            get {
                return this.icdICDNumberIDField;
            }
            set {
                if ((this.icdICDNumberIDField.Equals(value) != true)) {
                    this.icdICDNumberIDField = value;
                    this.RaisePropertyChanged("icdICDNumberID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string icdICDTab {
            get {
                return this.icdICDTabField;
            }
            set {
                if ((object.ReferenceEquals(this.icdICDTabField, value) != true)) {
                    this.icdICDTabField = value;
                    this.RaisePropertyChanged("icdICDTab");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedPatientClaimDiagnose", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedPatientClaimDiagnose : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MMC.MMCService.PatientService.PatientClaimDiagnose[] PatientClaimDiagnoseDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MMC.MMCService.PatientService.PatientClaimDiagnose[] PatientClaimDiagnoseDetails {
            get {
                return this.PatientClaimDiagnoseDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientClaimDiagnoseDetailsField, value) != true)) {
                    this.PatientClaimDiagnoseDetailsField = value;
                    this.RaisePropertyChanged("PatientClaimDiagnoseDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientClaimStatus", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO")]
    [System.SerializableAttribute()]
    public partial class PatientClaimStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClaimStatusIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeniedRationaleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatClaimStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientClaimIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientClaimStatusIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClaimStatusID {
            get {
                return this.ClaimStatusIDField;
            }
            set {
                if ((this.ClaimStatusIDField.Equals(value) != true)) {
                    this.ClaimStatusIDField = value;
                    this.RaisePropertyChanged("ClaimStatusID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeniedRationale {
            get {
                return this.DeniedRationaleField;
            }
            set {
                if ((object.ReferenceEquals(this.DeniedRationaleField, value) != true)) {
                    this.DeniedRationaleField = value;
                    this.RaisePropertyChanged("DeniedRationale");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatClaimStatusName {
            get {
                return this.PatClaimStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatClaimStatusNameField, value) != true)) {
                    this.PatClaimStatusNameField = value;
                    this.RaisePropertyChanged("PatClaimStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientClaimID {
            get {
                return this.PatientClaimIDField;
            }
            set {
                if ((this.PatientClaimIDField.Equals(value) != true)) {
                    this.PatientClaimIDField = value;
                    this.RaisePropertyChanged("PatientClaimID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientClaimStatusID {
            get {
                return this.PatientClaimStatusIDField;
            }
            set {
                if ((this.PatientClaimStatusIDField.Equals(value) != true)) {
                    this.PatientClaimStatusIDField = value;
                    this.RaisePropertyChanged("PatientClaimStatusID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedPatientClaimStatus", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedPatientClaimStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MMC.MMCService.PatientService.PatientClaimStatus[] PatientClaimStatustDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MMC.MMCService.PatientService.PatientClaimStatus[] PatientClaimStatustDetails {
            get {
                return this.PatientClaimStatustDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientClaimStatustDetailsField, value) != true)) {
                    this.PatientClaimStatustDetailsField = value;
                    this.RaisePropertyChanged("PatientClaimStatustDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientMedicalRecord", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO")]
    [System.SerializableAttribute()]
    public partial class PatientMedicalRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DocumentCategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DocumentTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PatMRDocumentDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatMRDocumentNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatMRPageEndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatMRPageStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatMRSummaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientMedicalRecordIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DocumentCategoryID {
            get {
                return this.DocumentCategoryIDField;
            }
            set {
                if ((this.DocumentCategoryIDField.Equals(value) != true)) {
                    this.DocumentCategoryIDField = value;
                    this.RaisePropertyChanged("DocumentCategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DocumentTypeID {
            get {
                return this.DocumentTypeIDField;
            }
            set {
                if ((this.DocumentTypeIDField.Equals(value) != true)) {
                    this.DocumentTypeIDField = value;
                    this.RaisePropertyChanged("DocumentTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PatMRDocumentDate {
            get {
                return this.PatMRDocumentDateField;
            }
            set {
                if ((this.PatMRDocumentDateField.Equals(value) != true)) {
                    this.PatMRDocumentDateField = value;
                    this.RaisePropertyChanged("PatMRDocumentDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatMRDocumentName {
            get {
                return this.PatMRDocumentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatMRDocumentNameField, value) != true)) {
                    this.PatMRDocumentNameField = value;
                    this.RaisePropertyChanged("PatMRDocumentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatMRPageEnd {
            get {
                return this.PatMRPageEndField;
            }
            set {
                if ((this.PatMRPageEndField.Equals(value) != true)) {
                    this.PatMRPageEndField = value;
                    this.RaisePropertyChanged("PatMRPageEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatMRPageStart {
            get {
                return this.PatMRPageStartField;
            }
            set {
                if ((this.PatMRPageStartField.Equals(value) != true)) {
                    this.PatMRPageStartField = value;
                    this.RaisePropertyChanged("PatMRPageStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatMRSummary {
            get {
                return this.PatMRSummaryField;
            }
            set {
                if ((object.ReferenceEquals(this.PatMRSummaryField, value) != true)) {
                    this.PatMRSummaryField = value;
                    this.RaisePropertyChanged("PatMRSummary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientID {
            get {
                return this.PatientIDField;
            }
            set {
                if ((this.PatientIDField.Equals(value) != true)) {
                    this.PatientIDField = value;
                    this.RaisePropertyChanged("PatientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientMedicalRecordID {
            get {
                return this.PatientMedicalRecordIDField;
            }
            set {
                if ((this.PatientMedicalRecordIDField.Equals(value) != true)) {
                    this.PatientMedicalRecordIDField = value;
                    this.RaisePropertyChanged("PatientMedicalRecordID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedPatientMedicalRecordByPatientID", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedPatientMedicalRecordByPatientID : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MMC.MMCService.PatientService.PatientMedicalRecordByPatientID[] PatientMedicalRecordByPatientIDDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MMC.MMCService.PatientService.PatientMedicalRecordByPatientID[] PatientMedicalRecordByPatientIDDetails {
            get {
                return this.PatientMedicalRecordByPatientIDDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientMedicalRecordByPatientIDDetailsField, value) != true)) {
                    this.PatientMedicalRecordByPatientIDDetailsField = value;
                    this.RaisePropertyChanged("PatientMedicalRecordByPatientIDDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientMedicalRecordByPatientID", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO")]
    [System.SerializableAttribute()]
    public partial class PatientMedicalRecordByPatientID : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DiagnosisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DocumentCategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatClaimNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PatMRDocumentDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatMRDocumentNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientClaimIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientMedicalRecordIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhysicianNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RFAReferralIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SummaryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Diagnosis {
            get {
                return this.DiagnosisField;
            }
            set {
                if ((object.ReferenceEquals(this.DiagnosisField, value) != true)) {
                    this.DiagnosisField = value;
                    this.RaisePropertyChanged("Diagnosis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DocumentCategoryName {
            get {
                return this.DocumentCategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentCategoryNameField, value) != true)) {
                    this.DocumentCategoryNameField = value;
                    this.RaisePropertyChanged("DocumentCategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatClaimNumber {
            get {
                return this.PatClaimNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PatClaimNumberField, value) != true)) {
                    this.PatClaimNumberField = value;
                    this.RaisePropertyChanged("PatClaimNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime PatMRDocumentDate {
            get {
                return this.PatMRDocumentDateField;
            }
            set {
                if ((this.PatMRDocumentDateField.Equals(value) != true)) {
                    this.PatMRDocumentDateField = value;
                    this.RaisePropertyChanged("PatMRDocumentDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatMRDocumentName {
            get {
                return this.PatMRDocumentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatMRDocumentNameField, value) != true)) {
                    this.PatMRDocumentNameField = value;
                    this.RaisePropertyChanged("PatMRDocumentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientClaimID {
            get {
                return this.PatientClaimIDField;
            }
            set {
                if ((this.PatientClaimIDField.Equals(value) != true)) {
                    this.PatientClaimIDField = value;
                    this.RaisePropertyChanged("PatientClaimID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientID {
            get {
                return this.PatientIDField;
            }
            set {
                if ((this.PatientIDField.Equals(value) != true)) {
                    this.PatientIDField = value;
                    this.RaisePropertyChanged("PatientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientMedicalRecordID {
            get {
                return this.PatientMedicalRecordIDField;
            }
            set {
                if ((this.PatientMedicalRecordIDField.Equals(value) != true)) {
                    this.PatientMedicalRecordIDField = value;
                    this.RaisePropertyChanged("PatientMedicalRecordID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhysicianName {
            get {
                return this.PhysicianNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PhysicianNameField, value) != true)) {
                    this.PhysicianNameField = value;
                    this.RaisePropertyChanged("PhysicianName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RFAReferralID {
            get {
                return this.RFAReferralIDField;
            }
            set {
                if ((this.RFAReferralIDField.Equals(value) != true)) {
                    this.RFAReferralIDField = value;
                    this.RaisePropertyChanged("RFAReferralID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((object.ReferenceEquals(this.SummaryField, value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientMedicalRecordTemplateByPatientID", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO")]
    [System.SerializableAttribute()]
    public partial class PatientMedicalRecordTemplateByPatientID : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AcceptedBodyPartsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClaimsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeniedBodyPartsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DiagnosisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DiscoveryBodyPartsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatientNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AcceptedBodyParts {
            get {
                return this.AcceptedBodyPartsField;
            }
            set {
                if ((object.ReferenceEquals(this.AcceptedBodyPartsField, value) != true)) {
                    this.AcceptedBodyPartsField = value;
                    this.RaisePropertyChanged("AcceptedBodyParts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Claims {
            get {
                return this.ClaimsField;
            }
            set {
                if ((object.ReferenceEquals(this.ClaimsField, value) != true)) {
                    this.ClaimsField = value;
                    this.RaisePropertyChanged("Claims");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeniedBodyParts {
            get {
                return this.DeniedBodyPartsField;
            }
            set {
                if ((object.ReferenceEquals(this.DeniedBodyPartsField, value) != true)) {
                    this.DeniedBodyPartsField = value;
                    this.RaisePropertyChanged("DeniedBodyParts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Diagnosis {
            get {
                return this.DiagnosisField;
            }
            set {
                if ((object.ReferenceEquals(this.DiagnosisField, value) != true)) {
                    this.DiagnosisField = value;
                    this.RaisePropertyChanged("Diagnosis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiscoveryBodyParts {
            get {
                return this.DiscoveryBodyPartsField;
            }
            set {
                if ((object.ReferenceEquals(this.DiscoveryBodyPartsField, value) != true)) {
                    this.DiscoveryBodyPartsField = value;
                    this.RaisePropertyChanged("DiscoveryBodyParts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatientName {
            get {
                return this.PatientNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientNameField, value) != true)) {
                    this.PatientNameField = value;
                    this.RaisePropertyChanged("PatientName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RFARequest", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO")]
    [System.SerializableAttribute()]
    public partial class RFARequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DecisionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DecisionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RFACPT_NDCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RFAClinicalReasonforDecisionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RFADurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RFADurationTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> RFAExpediteReferralField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RFAFrequencyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RFAGuidelinesUtilizedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> RFALatestDueDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RFANotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RFAQuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RFAReferralIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RFARelevantPortionUtilizedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RFAReqCertificationNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> RFARequestDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RFARequestIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RFARequestedTreatmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RFAStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RFAStrenghtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RequestTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TreatmentCategoryIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TreatmentTypeIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DecisionDate {
            get {
                return this.DecisionDateField;
            }
            set {
                if ((this.DecisionDateField.Equals(value) != true)) {
                    this.DecisionDateField = value;
                    this.RaisePropertyChanged("DecisionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DecisionID {
            get {
                return this.DecisionIDField;
            }
            set {
                if ((this.DecisionIDField.Equals(value) != true)) {
                    this.DecisionIDField = value;
                    this.RaisePropertyChanged("DecisionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RFACPT_NDC {
            get {
                return this.RFACPT_NDCField;
            }
            set {
                if ((object.ReferenceEquals(this.RFACPT_NDCField, value) != true)) {
                    this.RFACPT_NDCField = value;
                    this.RaisePropertyChanged("RFACPT_NDC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RFAClinicalReasonforDecision {
            get {
                return this.RFAClinicalReasonforDecisionField;
            }
            set {
                if ((object.ReferenceEquals(this.RFAClinicalReasonforDecisionField, value) != true)) {
                    this.RFAClinicalReasonforDecisionField = value;
                    this.RaisePropertyChanged("RFAClinicalReasonforDecision");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RFADuration {
            get {
                return this.RFADurationField;
            }
            set {
                if ((this.RFADurationField.Equals(value) != true)) {
                    this.RFADurationField = value;
                    this.RaisePropertyChanged("RFADuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RFADurationTypeID {
            get {
                return this.RFADurationTypeIDField;
            }
            set {
                if ((this.RFADurationTypeIDField.Equals(value) != true)) {
                    this.RFADurationTypeIDField = value;
                    this.RaisePropertyChanged("RFADurationTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> RFAExpediteReferral {
            get {
                return this.RFAExpediteReferralField;
            }
            set {
                if ((this.RFAExpediteReferralField.Equals(value) != true)) {
                    this.RFAExpediteReferralField = value;
                    this.RaisePropertyChanged("RFAExpediteReferral");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RFAFrequency {
            get {
                return this.RFAFrequencyField;
            }
            set {
                if ((this.RFAFrequencyField.Equals(value) != true)) {
                    this.RFAFrequencyField = value;
                    this.RaisePropertyChanged("RFAFrequency");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RFAGuidelinesUtilized {
            get {
                return this.RFAGuidelinesUtilizedField;
            }
            set {
                if ((object.ReferenceEquals(this.RFAGuidelinesUtilizedField, value) != true)) {
                    this.RFAGuidelinesUtilizedField = value;
                    this.RaisePropertyChanged("RFAGuidelinesUtilized");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> RFALatestDueDate {
            get {
                return this.RFALatestDueDateField;
            }
            set {
                if ((this.RFALatestDueDateField.Equals(value) != true)) {
                    this.RFALatestDueDateField = value;
                    this.RaisePropertyChanged("RFALatestDueDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RFANotes {
            get {
                return this.RFANotesField;
            }
            set {
                if ((object.ReferenceEquals(this.RFANotesField, value) != true)) {
                    this.RFANotesField = value;
                    this.RaisePropertyChanged("RFANotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RFAQuantity {
            get {
                return this.RFAQuantityField;
            }
            set {
                if ((this.RFAQuantityField.Equals(value) != true)) {
                    this.RFAQuantityField = value;
                    this.RaisePropertyChanged("RFAQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RFAReferralID {
            get {
                return this.RFAReferralIDField;
            }
            set {
                if ((this.RFAReferralIDField.Equals(value) != true)) {
                    this.RFAReferralIDField = value;
                    this.RaisePropertyChanged("RFAReferralID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RFARelevantPortionUtilized {
            get {
                return this.RFARelevantPortionUtilizedField;
            }
            set {
                if ((object.ReferenceEquals(this.RFARelevantPortionUtilizedField, value) != true)) {
                    this.RFARelevantPortionUtilizedField = value;
                    this.RaisePropertyChanged("RFARelevantPortionUtilized");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RFAReqCertificationNumber {
            get {
                return this.RFAReqCertificationNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.RFAReqCertificationNumberField, value) != true)) {
                    this.RFAReqCertificationNumberField = value;
                    this.RaisePropertyChanged("RFAReqCertificationNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> RFARequestDate {
            get {
                return this.RFARequestDateField;
            }
            set {
                if ((this.RFARequestDateField.Equals(value) != true)) {
                    this.RFARequestDateField = value;
                    this.RaisePropertyChanged("RFARequestDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RFARequestID {
            get {
                return this.RFARequestIDField;
            }
            set {
                if ((this.RFARequestIDField.Equals(value) != true)) {
                    this.RFARequestIDField = value;
                    this.RaisePropertyChanged("RFARequestID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RFARequestedTreatment {
            get {
                return this.RFARequestedTreatmentField;
            }
            set {
                if ((object.ReferenceEquals(this.RFARequestedTreatmentField, value) != true)) {
                    this.RFARequestedTreatmentField = value;
                    this.RaisePropertyChanged("RFARequestedTreatment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RFAStatus {
            get {
                return this.RFAStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.RFAStatusField, value) != true)) {
                    this.RFAStatusField = value;
                    this.RaisePropertyChanged("RFAStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RFAStrenght {
            get {
                return this.RFAStrenghtField;
            }
            set {
                if ((object.ReferenceEquals(this.RFAStrenghtField, value) != true)) {
                    this.RFAStrenghtField = value;
                    this.RaisePropertyChanged("RFAStrenght");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RequestTypeID {
            get {
                return this.RequestTypeIDField;
            }
            set {
                if ((this.RequestTypeIDField.Equals(value) != true)) {
                    this.RequestTypeIDField = value;
                    this.RaisePropertyChanged("RequestTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TreatmentCategoryID {
            get {
                return this.TreatmentCategoryIDField;
            }
            set {
                if ((this.TreatmentCategoryIDField.Equals(value) != true)) {
                    this.TreatmentCategoryIDField = value;
                    this.RaisePropertyChanged("TreatmentCategoryID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TreatmentTypeID {
            get {
                return this.TreatmentTypeIDField;
            }
            set {
                if ((this.TreatmentTypeIDField.Equals(value) != true)) {
                    this.TreatmentTypeIDField = value;
                    this.RaisePropertyChanged("TreatmentTypeID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedBodyPartDetail", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedBodyPartDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MMC.MMCService.PatientService.BodyPartDetail[] BodyPartDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MMC.MMCService.PatientService.BodyPartDetail[] BodyPartDetails {
            get {
                return this.BodyPartDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyPartDetailsField, value) != true)) {
                    this.BodyPartDetailsField = value;
                    this.RaisePropertyChanged("BodyPartDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BodyPartDetail", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO")]
    [System.SerializableAttribute()]
    public partial class BodyPartDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BodyPartIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BodyPartNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BodyPartStatusNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TableNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BodyPartID {
            get {
                return this.BodyPartIDField;
            }
            set {
                if ((this.BodyPartIDField.Equals(value) != true)) {
                    this.BodyPartIDField = value;
                    this.RaisePropertyChanged("BodyPartID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BodyPartName {
            get {
                return this.BodyPartNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyPartNameField, value) != true)) {
                    this.BodyPartNameField = value;
                    this.RaisePropertyChanged("BodyPartName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BodyPartStatusName {
            get {
                return this.BodyPartStatusNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyPartStatusNameField, value) != true)) {
                    this.BodyPartStatusNameField = value;
                    this.RaisePropertyChanged("BodyPartStatusName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TableName {
            get {
                return this.TableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TableNameField, value) != true)) {
                    this.TableNameField = value;
                    this.RaisePropertyChanged("TableName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PagedNotesDetail", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO.Paged")]
    [System.SerializableAttribute()]
    public partial class PagedNotesDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MMC.MMCService.PatientService.NotesDetail[] NotesDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MMC.MMCService.PatientService.NotesDetail[] NotesDetails {
            get {
                return this.NotesDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesDetailsField, value) != true)) {
                    this.NotesDetailsField = value;
                    this.RaisePropertyChanged("NotesDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalCount {
            get {
                return this.TotalCountField;
            }
            set {
                if ((this.TotalCountField.Equals(value) != true)) {
                    this.TotalCountField = value;
                    this.RaisePropertyChanged("TotalCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NotesDetail", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO")]
    [System.SerializableAttribute()]
    public partial class NotesDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoteIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatClaimNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientClaimIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> RFARequestIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RFARequestedTreatmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoteID {
            get {
                return this.NoteIDField;
            }
            set {
                if ((this.NoteIDField.Equals(value) != true)) {
                    this.NoteIDField = value;
                    this.RaisePropertyChanged("NoteID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NotesDate {
            get {
                return this.NotesDateField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesDateField, value) != true)) {
                    this.NotesDateField = value;
                    this.RaisePropertyChanged("NotesDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NotesTime {
            get {
                return this.NotesTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesTimeField, value) != true)) {
                    this.NotesTimeField = value;
                    this.RaisePropertyChanged("NotesTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatClaimNumber {
            get {
                return this.PatClaimNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PatClaimNumberField, value) != true)) {
                    this.PatClaimNumberField = value;
                    this.RaisePropertyChanged("PatClaimNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientClaimID {
            get {
                return this.PatientClaimIDField;
            }
            set {
                if ((this.PatientClaimIDField.Equals(value) != true)) {
                    this.PatientClaimIDField = value;
                    this.RaisePropertyChanged("PatientClaimID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> RFARequestID {
            get {
                return this.RFARequestIDField;
            }
            set {
                if ((this.RFARequestIDField.Equals(value) != true)) {
                    this.RFARequestIDField = value;
                    this.RaisePropertyChanged("RFARequestID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RFARequestedTreatment {
            get {
                return this.RFARequestedTreatmentField;
            }
            set {
                if ((object.ReferenceEquals(this.RFARequestedTreatmentField, value) != true)) {
                    this.RFARequestedTreatmentField = value;
                    this.RaisePropertyChanged("RFARequestedTreatment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Users {
            get {
                return this.UsersField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersField, value) != true)) {
                    this.UsersField = value;
                    this.RaisePropertyChanged("Users");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientOccupational", Namespace="http://schemas.datacontract.org/2004/07/MMCService.DTO")]
    [System.SerializableAttribute()]
    public partial class PatientOccupational : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatOptInjuryDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatOptInjuryTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatOptJobDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PatOptJobTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PatientOccupationalIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatOptInjuryDescription {
            get {
                return this.PatOptInjuryDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.PatOptInjuryDescriptionField, value) != true)) {
                    this.PatOptInjuryDescriptionField = value;
                    this.RaisePropertyChanged("PatOptInjuryDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatOptInjuryType {
            get {
                return this.PatOptInjuryTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.PatOptInjuryTypeField, value) != true)) {
                    this.PatOptInjuryTypeField = value;
                    this.RaisePropertyChanged("PatOptInjuryType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatOptJobDescription {
            get {
                return this.PatOptJobDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.PatOptJobDescriptionField, value) != true)) {
                    this.PatOptJobDescriptionField = value;
                    this.RaisePropertyChanged("PatOptJobDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PatOptJobTitle {
            get {
                return this.PatOptJobTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.PatOptJobTitleField, value) != true)) {
                    this.PatOptJobTitleField = value;
                    this.RaisePropertyChanged("PatOptJobTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientID {
            get {
                return this.PatientIDField;
            }
            set {
                if ((this.PatientIDField.Equals(value) != true)) {
                    this.PatientIDField = value;
                    this.RaisePropertyChanged("PatientID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PatientOccupationalID {
            get {
                return this.PatientOccupationalIDField;
            }
            set {
                if ((this.PatientOccupationalIDField.Equals(value) != true)) {
                    this.PatientOccupationalIDField = value;
                    this.RaisePropertyChanged("PatientOccupationalID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MMCService.PatientService.IPatientService")]
    public interface IPatientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatient", ReplyAction="http://tempuri.org/IPatientService/addPatientResponse")]
        int addPatient(MMC.MMCService.PatientService.Patient _patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatient", ReplyAction="http://tempuri.org/IPatientService/addPatientResponse")]
        System.Threading.Tasks.Task<int> addPatientAsync(MMC.MMCService.PatientService.Patient _patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatient", ReplyAction="http://tempuri.org/IPatientService/updatePatientResponse")]
        int updatePatient(MMC.MMCService.PatientService.Patient _patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatient", ReplyAction="http://tempuri.org/IPatientService/updatePatientResponse")]
        System.Threading.Tasks.Task<int> updatePatientAsync(MMC.MMCService.PatientService.Patient _patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatient", ReplyAction="http://tempuri.org/IPatientService/deletePatientResponse")]
        void deletePatient(int _patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatient", ReplyAction="http://tempuri.org/IPatientService/deletePatientResponse")]
        System.Threading.Tasks.Task deletePatientAsync(int _patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getpatientsAll", ReplyAction="http://tempuri.org/IPatientService/getpatientsAllResponse")]
        MMC.MMCService.PatientService.Patient[] getpatientsAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getpatientsAll", ReplyAction="http://tempuri.org/IPatientService/getpatientsAllResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.Patient[]> getpatientsAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientByID", ReplyAction="http://tempuri.org/IPatientService/getPatientByIDResponse")]
        MMC.MMCService.PatientService.Patient getPatientByID(int _patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientByID", ReplyAction="http://tempuri.org/IPatientService/getPatientByIDResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.Patient> getPatientByIDAsync(int _patientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientsByName", ReplyAction="http://tempuri.org/IPatientService/getPatientsByNameResponse")]
        MMC.MMCService.PatientService.PagedPatient getPatientsByName(string SearchText, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientsByName", ReplyAction="http://tempuri.org/IPatientService/getPatientsByNameResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatient> getPatientsByNameAsync(string SearchText, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatientCurrentMedicalCondition", ReplyAction="http://tempuri.org/IPatientService/addPatientCurrentMedicalConditionResponse")]
        int addPatientCurrentMedicalCondition(MMC.MMCService.PatientService.PatientCurrentMedicalCondition _patientCurrentMedicalCondition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatientCurrentMedicalCondition", ReplyAction="http://tempuri.org/IPatientService/addPatientCurrentMedicalConditionResponse")]
        System.Threading.Tasks.Task<int> addPatientCurrentMedicalConditionAsync(MMC.MMCService.PatientService.PatientCurrentMedicalCondition _patientCurrentMedicalCondition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientCurrentMedicalCondition", ReplyAction="http://tempuri.org/IPatientService/updatePatientCurrentMedicalConditionResponse")]
        int updatePatientCurrentMedicalCondition(MMC.MMCService.PatientService.PatientCurrentMedicalCondition _patientCurrentMedicalCondition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientCurrentMedicalCondition", ReplyAction="http://tempuri.org/IPatientService/updatePatientCurrentMedicalConditionResponse")]
        System.Threading.Tasks.Task<int> updatePatientCurrentMedicalConditionAsync(MMC.MMCService.PatientService.PatientCurrentMedicalCondition _patientCurrentMedicalCondition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientCurrentMedicalCondition", ReplyAction="http://tempuri.org/IPatientService/deletePatientCurrentMedicalConditionResponse")]
        void deletePatientCurrentMedicalCondition(int _patientCurrentMedicalConditionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientCurrentMedicalCondition", ReplyAction="http://tempuri.org/IPatientService/deletePatientCurrentMedicalConditionResponse")]
        System.Threading.Tasks.Task deletePatientCurrentMedicalConditionAsync(int _patientCurrentMedicalConditionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getpatientCurrentMedicalConditionByPatientId", ReplyAction="http://tempuri.org/IPatientService/getpatientCurrentMedicalConditionByPatientIdRe" +
            "sponse")]
        MMC.MMCService.PatientService.PagedPatientCurrentMedicalCondition getpatientCurrentMedicalConditionByPatientId(int _patientID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getpatientCurrentMedicalConditionByPatientId", ReplyAction="http://tempuri.org/IPatientService/getpatientCurrentMedicalConditionByPatientIdRe" +
            "sponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientCurrentMedicalCondition> getpatientCurrentMedicalConditionByPatientIdAsync(int _patientID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getpatientCurrentMedicalConditionByID", ReplyAction="http://tempuri.org/IPatientService/getpatientCurrentMedicalConditionByIDResponse")]
        MMC.MMCService.PatientService.PatientCurrentMedicalCondition getpatientCurrentMedicalConditionByID(int _patientCurrentMedicalConditionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getpatientCurrentMedicalConditionByID", ReplyAction="http://tempuri.org/IPatientService/getpatientCurrentMedicalConditionByIDResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientCurrentMedicalCondition> getpatientCurrentMedicalConditionByIDAsync(int _patientCurrentMedicalConditionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientCurrentMedicalConditionByPatientI" +
            "D", ReplyAction="http://tempuri.org/IPatientService/deletePatientCurrentMedicalConditionByPatientI" +
            "DResponse")]
        void deletePatientCurrentMedicalConditionByPatientID(int _patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientCurrentMedicalConditionByPatientI" +
            "D", ReplyAction="http://tempuri.org/IPatientService/deletePatientCurrentMedicalConditionByPatientI" +
            "DResponse")]
        System.Threading.Tasks.Task deletePatientCurrentMedicalConditionByPatientIDAsync(int _patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientCurrentMedicalConditionByPatientAndC" +
            "MCID", ReplyAction="http://tempuri.org/IPatientService/getPatientCurrentMedicalConditionByPatientAndC" +
            "MCIDResponse")]
        int getPatientCurrentMedicalConditionByPatientAndCMCID(int _patientid, int _currentMedicalConditionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientCurrentMedicalConditionByPatientAndC" +
            "MCID", ReplyAction="http://tempuri.org/IPatientService/getPatientCurrentMedicalConditionByPatientAndC" +
            "MCIDResponse")]
        System.Threading.Tasks.Task<int> getPatientCurrentMedicalConditionByPatientAndCMCIDAsync(int _patientid, int _currentMedicalConditionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/UpdatePatientMedicareEligibleByID", ReplyAction="http://tempuri.org/IPatientService/UpdatePatientMedicareEligibleByIDResponse")]
        void UpdatePatientMedicareEligibleByID(int _patientid, string mode, int _currentMedicalConditionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/UpdatePatientMedicareEligibleByID", ReplyAction="http://tempuri.org/IPatientService/UpdatePatientMedicareEligibleByIDResponse")]
        System.Threading.Tasks.Task UpdatePatientMedicareEligibleByIDAsync(int _patientid, string mode, int _currentMedicalConditionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatientClaim", ReplyAction="http://tempuri.org/IPatientService/addPatientClaimResponse")]
        int addPatientClaim(MMC.MMCService.PatientService.PatientClaim _patientClaim);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatientClaim", ReplyAction="http://tempuri.org/IPatientService/addPatientClaimResponse")]
        System.Threading.Tasks.Task<int> addPatientClaimAsync(MMC.MMCService.PatientService.PatientClaim _patientClaim);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientClaim", ReplyAction="http://tempuri.org/IPatientService/updatePatientClaimResponse")]
        int updatePatientClaim(MMC.MMCService.PatientService.PatientClaim _patientClaim);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientClaim", ReplyAction="http://tempuri.org/IPatientService/updatePatientClaimResponse")]
        System.Threading.Tasks.Task<int> updatePatientClaimAsync(MMC.MMCService.PatientService.PatientClaim _patientClaim);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaim", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimResponse")]
        void deletePatientClaim(int _patientClaimID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaim", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimResponse")]
        System.Threading.Tasks.Task deletePatientClaimAsync(int _patientClaimID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getpatientClaimsByPatientID", ReplyAction="http://tempuri.org/IPatientService/getpatientClaimsByPatientIDResponse")]
        MMC.MMCService.PatientService.PagedPatientClaim getpatientClaimsByPatientID(int _patientID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getpatientClaimsByPatientID", ReplyAction="http://tempuri.org/IPatientService/getpatientClaimsByPatientIDResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientClaim> getpatientClaimsByPatientIDAsync(int _patientID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getAllpatientClaimsByPatientID", ReplyAction="http://tempuri.org/IPatientService/getAllpatientClaimsByPatientIDResponse")]
        MMC.MMCService.PatientService.PatientClaim[] getAllpatientClaimsByPatientID(int _patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getAllpatientClaimsByPatientID", ReplyAction="http://tempuri.org/IPatientService/getAllpatientClaimsByPatientIDResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientClaim[]> getAllpatientClaimsByPatientIDAsync(int _patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimByID", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimByIDResponse")]
        MMC.MMCService.PatientService.PatientClaim getPatientClaimByID(int _patientClaimID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimByID", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimByIDResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientClaim> getPatientClaimByIDAsync(int _patientClaimID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getpatientClaimsByName", ReplyAction="http://tempuri.org/IPatientService/getpatientClaimsByNameResponse")]
        MMC.MMCService.PatientService.PagedPatientClaim getpatientClaimsByName(string _searchText, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getpatientClaimsByName", ReplyAction="http://tempuri.org/IPatientService/getpatientClaimsByNameResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientClaim> getpatientClaimsByNameAsync(string _searchText, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimBodyPartByBPStatusID", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimBodyPartByBPStatusIDResponse")]
        MMC.MMCService.PatientService.PagedPatientClaimBodyPartByBPStatusID getPatientClaimBodyPartByBPStatusID(int _patientClaimID, int _bodyPartStatusID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimBodyPartByBPStatusID", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimBodyPartByBPStatusIDResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientClaimBodyPartByBPStatusID> getPatientClaimBodyPartByBPStatusIDAsync(int _patientClaimID, int _bodyPartStatusID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatientClaimAddOnBodyPart", ReplyAction="http://tempuri.org/IPatientService/addPatientClaimAddOnBodyPartResponse")]
        int addPatientClaimAddOnBodyPart(MMC.MMCService.PatientService.PatientClaimAddOnBodyPart _patientClaimAddOnBodyPart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatientClaimAddOnBodyPart", ReplyAction="http://tempuri.org/IPatientService/addPatientClaimAddOnBodyPartResponse")]
        System.Threading.Tasks.Task<int> addPatientClaimAddOnBodyPartAsync(MMC.MMCService.PatientService.PatientClaimAddOnBodyPart _patientClaimAddOnBodyPart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientClaimAddOnBodyPart", ReplyAction="http://tempuri.org/IPatientService/updatePatientClaimAddOnBodyPartResponse")]
        int updatePatientClaimAddOnBodyPart(MMC.MMCService.PatientService.PatientClaimAddOnBodyPart _patientClaimAddOnBodyPart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientClaimAddOnBodyPart", ReplyAction="http://tempuri.org/IPatientService/updatePatientClaimAddOnBodyPartResponse")]
        System.Threading.Tasks.Task<int> updatePatientClaimAddOnBodyPartAsync(MMC.MMCService.PatientService.PatientClaimAddOnBodyPart _patientClaimAddOnBodyPart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaimAddOnBodyPart", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimAddOnBodyPartResponse")]
        void deletePatientClaimAddOnBodyPart(int _patientAddOnBodyPartID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaimAddOnBodyPart", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimAddOnBodyPartResponse")]
        System.Threading.Tasks.Task deletePatientClaimAddOnBodyPartAsync(int _patientAddOnBodyPartID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimAddOnBodyPartByPatientClaimId", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimAddOnBodyPartByPatientClaimIdRe" +
            "sponse")]
        MMC.MMCService.PatientService.PagedPatientClaimAddOnBodyPart getPatientClaimAddOnBodyPartByPatientClaimId(int _patientclaimID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimAddOnBodyPartByPatientClaimId", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimAddOnBodyPartByPatientClaimIdRe" +
            "sponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientClaimAddOnBodyPart> getPatientClaimAddOnBodyPartByPatientClaimIdAsync(int _patientclaimID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimAddOnBodyPartByID", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimAddOnBodyPartByIDResponse")]
        MMC.MMCService.PatientService.PatientClaimAddOnBodyPart getPatientClaimAddOnBodyPartByID(int _patientAddOnBodyPartID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimAddOnBodyPartByID", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimAddOnBodyPartByIDResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientClaimAddOnBodyPart> getPatientClaimAddOnBodyPartByIDAsync(int _patientAddOnBodyPartID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaimAddOnBodyPartByPatientClaimI" +
            "D", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimAddOnBodyPartByPatientClaimI" +
            "DResponse")]
        void deletePatientClaimAddOnBodyPartByPatientClaimID(int _patientClaimID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaimAddOnBodyPartByPatientClaimI" +
            "D", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimAddOnBodyPartByPatientClaimI" +
            "DResponse")]
        System.Threading.Tasks.Task deletePatientClaimAddOnBodyPartByPatientClaimIDAsync(int _patientClaimID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatientClaimPleadBodyPart", ReplyAction="http://tempuri.org/IPatientService/addPatientClaimPleadBodyPartResponse")]
        int addPatientClaimPleadBodyPart(MMC.MMCService.PatientService.PatientClaimPleadBodyPart _patientClaimPleadBodyPart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatientClaimPleadBodyPart", ReplyAction="http://tempuri.org/IPatientService/addPatientClaimPleadBodyPartResponse")]
        System.Threading.Tasks.Task<int> addPatientClaimPleadBodyPartAsync(MMC.MMCService.PatientService.PatientClaimPleadBodyPart _patientClaimPleadBodyPart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientClaimPleadBodyPart", ReplyAction="http://tempuri.org/IPatientService/updatePatientClaimPleadBodyPartResponse")]
        int updatePatientClaimPleadBodyPart(MMC.MMCService.PatientService.PatientClaimPleadBodyPart _patientClaimPleadBodyPart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientClaimPleadBodyPart", ReplyAction="http://tempuri.org/IPatientService/updatePatientClaimPleadBodyPartResponse")]
        System.Threading.Tasks.Task<int> updatePatientClaimPleadBodyPartAsync(MMC.MMCService.PatientService.PatientClaimPleadBodyPart _patientClaimPleadBodyPart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaimPleadBodyPart", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimPleadBodyPartResponse")]
        void deletePatientClaimPleadBodyPart(int _patientClaimPleadBodyPartID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaimPleadBodyPart", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimPleadBodyPartResponse")]
        System.Threading.Tasks.Task deletePatientClaimPleadBodyPartAsync(int _patientClaimPleadBodyPartID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimPleadBodyPartByPatientClaimId", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimPleadBodyPartByPatientClaimIdRe" +
            "sponse")]
        MMC.MMCService.PatientService.PagedPatientClaimPleadBodyPart getPatientClaimPleadBodyPartByPatientClaimId(int _patientclaimID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimPleadBodyPartByPatientClaimId", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimPleadBodyPartByPatientClaimIdRe" +
            "sponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientClaimPleadBodyPart> getPatientClaimPleadBodyPartByPatientClaimIdAsync(int _patientclaimID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimPleadBodyPartByID", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimPleadBodyPartByIDResponse")]
        MMC.MMCService.PatientService.PatientClaimPleadBodyPart getPatientClaimPleadBodyPartByID(int _patientClaimPleadBodyPartID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimPleadBodyPartByID", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimPleadBodyPartByIDResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientClaimPleadBodyPart> getPatientClaimPleadBodyPartByIDAsync(int _patientClaimPleadBodyPartID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaimPleadBodyPartByPatientClaimI" +
            "D", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimPleadBodyPartByPatientClaimI" +
            "DResponse")]
        void deletePatientClaimPleadBodyPartByPatientClaimID(int _patientClaimID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaimPleadBodyPartByPatientClaimI" +
            "D", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimPleadBodyPartByPatientClaimI" +
            "DResponse")]
        System.Threading.Tasks.Task deletePatientClaimPleadBodyPartByPatientClaimIDAsync(int _patientClaimID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientClaimPleadBodyPartByPatientClaimI" +
            "D", ReplyAction="http://tempuri.org/IPatientService/updatePatientClaimPleadBodyPartByPatientClaimI" +
            "DResponse")]
        void updatePatientClaimPleadBodyPartByPatientClaimID(int _patientClaimID, int _bodyPartStatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientClaimPleadBodyPartByPatientClaimI" +
            "D", ReplyAction="http://tempuri.org/IPatientService/updatePatientClaimPleadBodyPartByPatientClaimI" +
            "DResponse")]
        System.Threading.Tasks.Task updatePatientClaimPleadBodyPartByPatientClaimIDAsync(int _patientClaimID, int _bodyPartStatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatientClaimDiagnose", ReplyAction="http://tempuri.org/IPatientService/addPatientClaimDiagnoseResponse")]
        int addPatientClaimDiagnose(MMC.MMCService.PatientService.PatientClaimDiagnose _patientClaimDiagnose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatientClaimDiagnose", ReplyAction="http://tempuri.org/IPatientService/addPatientClaimDiagnoseResponse")]
        System.Threading.Tasks.Task<int> addPatientClaimDiagnoseAsync(MMC.MMCService.PatientService.PatientClaimDiagnose _patientClaimDiagnose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientClaimDiagnose", ReplyAction="http://tempuri.org/IPatientService/updatePatientClaimDiagnoseResponse")]
        int updatePatientClaimDiagnose(MMC.MMCService.PatientService.PatientClaimDiagnose _patientClaimDiagnose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientClaimDiagnose", ReplyAction="http://tempuri.org/IPatientService/updatePatientClaimDiagnoseResponse")]
        System.Threading.Tasks.Task<int> updatePatientClaimDiagnoseAsync(MMC.MMCService.PatientService.PatientClaimDiagnose _patientClaimDiagnose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaimDiagnose", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimDiagnoseResponse")]
        void deletePatientClaimDiagnose(int _patientClaimDiagnoseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaimDiagnose", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimDiagnoseResponse")]
        System.Threading.Tasks.Task deletePatientClaimDiagnoseAsync(int _patientClaimDiagnoseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimDiagnoseByPatientClaimId", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimDiagnoseByPatientClaimIdRespons" +
            "e")]
        MMC.MMCService.PatientService.PagedPatientClaimDiagnose getPatientClaimDiagnoseByPatientClaimId(int _patientclaimID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimDiagnoseByPatientClaimId", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimDiagnoseByPatientClaimIdRespons" +
            "e")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientClaimDiagnose> getPatientClaimDiagnoseByPatientClaimIdAsync(int _patientclaimID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimDiagnoseByPatientClaimIdAll", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimDiagnoseByPatientClaimIdAllResp" +
            "onse")]
        MMC.MMCService.PatientService.PatientClaimDiagnose[] getPatientClaimDiagnoseByPatientClaimIdAll(int _patientClaimID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimDiagnoseByPatientClaimIdAll", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimDiagnoseByPatientClaimIdAllResp" +
            "onse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientClaimDiagnose[]> getPatientClaimDiagnoseByPatientClaimIdAllAsync(int _patientClaimID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimDiagnoseByID", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimDiagnoseByIDResponse")]
        MMC.MMCService.PatientService.PatientClaimDiagnose getPatientClaimDiagnoseByID(int _patientClaimDiagnoseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimDiagnoseByID", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimDiagnoseByIDResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientClaimDiagnose> getPatientClaimDiagnoseByIDAsync(int _patientClaimDiagnoseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaimDiagnosePatientClaimID", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimDiagnosePatientClaimIDRespon" +
            "se")]
        void deletePatientClaimDiagnosePatientClaimID(int _patientClaimID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaimDiagnosePatientClaimID", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimDiagnosePatientClaimIDRespon" +
            "se")]
        System.Threading.Tasks.Task deletePatientClaimDiagnosePatientClaimIDAsync(int _patientClaimID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatientClaimStatus", ReplyAction="http://tempuri.org/IPatientService/addPatientClaimStatusResponse")]
        int addPatientClaimStatus(MMC.MMCService.PatientService.PatientClaimStatus _patientClaimStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatientClaimStatus", ReplyAction="http://tempuri.org/IPatientService/addPatientClaimStatusResponse")]
        System.Threading.Tasks.Task<int> addPatientClaimStatusAsync(MMC.MMCService.PatientService.PatientClaimStatus _patientClaimStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientClaimStatus", ReplyAction="http://tempuri.org/IPatientService/updatePatientClaimStatusResponse")]
        int updatePatientClaimStatus(MMC.MMCService.PatientService.PatientClaimStatus _patientClaimStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientClaimStatus", ReplyAction="http://tempuri.org/IPatientService/updatePatientClaimStatusResponse")]
        System.Threading.Tasks.Task<int> updatePatientClaimStatusAsync(MMC.MMCService.PatientService.PatientClaimStatus _patientClaimStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updateDeniedRationale", ReplyAction="http://tempuri.org/IPatientService/updateDeniedRationaleResponse")]
        int updateDeniedRationale(MMC.MMCService.PatientService.PatientClaimStatus _patientClaimStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updateDeniedRationale", ReplyAction="http://tempuri.org/IPatientService/updateDeniedRationaleResponse")]
        System.Threading.Tasks.Task<int> updateDeniedRationaleAsync(MMC.MMCService.PatientService.PatientClaimStatus _patientClaimStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaimStatus", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimStatusResponse")]
        void deletePatientClaimStatus(int _patientClaimStatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaimStatus", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimStatusResponse")]
        System.Threading.Tasks.Task deletePatientClaimStatusAsync(int _patientClaimStatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimStatusByPatientClaimId", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimStatusByPatientClaimIdResponse")]
        MMC.MMCService.PatientService.PagedPatientClaimStatus getPatientClaimStatusByPatientClaimId(int _patientClaimID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimStatusByPatientClaimId", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimStatusByPatientClaimIdResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientClaimStatus> getPatientClaimStatusByPatientClaimIdAsync(int _patientClaimID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimStatusByID", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimStatusByIDResponse")]
        MMC.MMCService.PatientService.PatientClaimStatus getPatientClaimStatusByID(int _patientClaimStatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimStatusByID", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimStatusByIDResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientClaimStatus> getPatientClaimStatusByIDAsync(int _patientClaimStatusID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimStatusByRefferalID", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimStatusByRefferalIDResponse")]
        MMC.MMCService.PatientService.PatientClaimStatus getPatientClaimStatusByRefferalID(int _rfaRefferalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientClaimStatusByRefferalID", ReplyAction="http://tempuri.org/IPatientService/getPatientClaimStatusByRefferalIDResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientClaimStatus> getPatientClaimStatusByRefferalIDAsync(int _rfaRefferalID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaimStatusPatientClaimID", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimStatusPatientClaimIDResponse" +
            "")]
        void deletePatientClaimStatusPatientClaimID(int _patientClaimID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/deletePatientClaimStatusPatientClaimID", ReplyAction="http://tempuri.org/IPatientService/deletePatientClaimStatusPatientClaimIDResponse" +
            "")]
        System.Threading.Tasks.Task deletePatientClaimStatusPatientClaimIDAsync(int _patientClaimID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatientMedicalRecords", ReplyAction="http://tempuri.org/IPatientService/addPatientMedicalRecordsResponse")]
        int addPatientMedicalRecords(MMC.MMCService.PatientService.PatientMedicalRecord PatientMedicalRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatientMedicalRecords", ReplyAction="http://tempuri.org/IPatientService/addPatientMedicalRecordsResponse")]
        System.Threading.Tasks.Task<int> addPatientMedicalRecordsAsync(MMC.MMCService.PatientService.PatientMedicalRecord PatientMedicalRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientMedicalRecords", ReplyAction="http://tempuri.org/IPatientService/updatePatientMedicalRecordsResponse")]
        int updatePatientMedicalRecords(MMC.MMCService.PatientService.PatientMedicalRecord _medicalRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientMedicalRecords", ReplyAction="http://tempuri.org/IPatientService/updatePatientMedicalRecordsResponse")]
        System.Threading.Tasks.Task<int> updatePatientMedicalRecordsAsync(MMC.MMCService.PatientService.PatientMedicalRecord _medicalRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientMedicalRecordsForMedicalRec", ReplyAction="http://tempuri.org/IPatientService/updatePatientMedicalRecordsForMedicalRecRespon" +
            "se")]
        int updatePatientMedicalRecordsForMedicalRec(MMC.MMCService.PatientService.PatientMedicalRecord _medicalRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientMedicalRecordsForMedicalRec", ReplyAction="http://tempuri.org/IPatientService/updatePatientMedicalRecordsForMedicalRecRespon" +
            "se")]
        System.Threading.Tasks.Task<int> updatePatientMedicalRecordsForMedicalRecAsync(MMC.MMCService.PatientService.PatientMedicalRecord _medicalRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getpatientsMedicalRecordAll", ReplyAction="http://tempuri.org/IPatientService/getpatientsMedicalRecordAllResponse")]
        MMC.MMCService.PatientService.PatientMedicalRecord[] getpatientsMedicalRecordAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getpatientsMedicalRecordAll", ReplyAction="http://tempuri.org/IPatientService/getpatientsMedicalRecordAllResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientMedicalRecord[]> getpatientsMedicalRecordAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientMedicalRecordByID", ReplyAction="http://tempuri.org/IPatientService/getPatientMedicalRecordByIDResponse")]
        MMC.MMCService.PatientService.PatientMedicalRecord getPatientMedicalRecordByID(int _id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientMedicalRecordByID", ReplyAction="http://tempuri.org/IPatientService/getPatientMedicalRecordByIDResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientMedicalRecord> getPatientMedicalRecordByIDAsync(int _id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getMedicalRecordSplittingByPatientID", ReplyAction="http://tempuri.org/IPatientService/getMedicalRecordSplittingByPatientIDResponse")]
        MMC.MMCService.PatientService.PatientMedicalRecord[] getMedicalRecordSplittingByPatientID(int _patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getMedicalRecordSplittingByPatientID", ReplyAction="http://tempuri.org/IPatientService/getMedicalRecordSplittingByPatientIDResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientMedicalRecord[]> getMedicalRecordSplittingByPatientIDAsync(int _patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientMedicalRecordByPatientID", ReplyAction="http://tempuri.org/IPatientService/getPatientMedicalRecordByPatientIDResponse")]
        MMC.MMCService.PatientService.PagedPatientMedicalRecordByPatientID getPatientMedicalRecordByPatientID(int _patientID, int _skip, int _take, string _sortBy, string _order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientMedicalRecordByPatientID", ReplyAction="http://tempuri.org/IPatientService/getPatientMedicalRecordByPatientIDResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientMedicalRecordByPatientID> getPatientMedicalRecordByPatientIDAsync(int _patientID, int _skip, int _take, string _sortBy, string _order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientMedicalRecordTemplateByPatientID", ReplyAction="http://tempuri.org/IPatientService/getPatientMedicalRecordTemplateByPatientIDResp" +
            "onse")]
        MMC.MMCService.PatientService.PatientMedicalRecordTemplateByPatientID getPatientMedicalRecordTemplateByPatientID(int _patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientMedicalRecordTemplateByPatientID", ReplyAction="http://tempuri.org/IPatientService/getPatientMedicalRecordTemplateByPatientIDResp" +
            "onse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientMedicalRecordTemplateByPatientID> getPatientMedicalRecordTemplateByPatientIDAsync(int _patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/GetPatientMedicalRecordMultipleTemplateByPatie" +
            "ntID", ReplyAction="http://tempuri.org/IPatientService/GetPatientMedicalRecordMultipleTemplateByPatie" +
            "ntIDResponse")]
        MMC.MMCService.PatientService.PatientMedicalRecordByPatientID[] GetPatientMedicalRecordMultipleTemplateByPatientID(int _patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/GetPatientMedicalRecordMultipleTemplateByPatie" +
            "ntID", ReplyAction="http://tempuri.org/IPatientService/GetPatientMedicalRecordMultipleTemplateByPatie" +
            "ntIDResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientMedicalRecordByPatientID[]> GetPatientMedicalRecordMultipleTemplateByPatientIDAsync(int _patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getRFARequestRecordsByPatientClaim", ReplyAction="http://tempuri.org/IPatientService/getRFARequestRecordsByPatientClaimResponse")]
        MMC.MMCService.PatientService.RFARequest[] getRFARequestRecordsByPatientClaim(string _patientClaim);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getRFARequestRecordsByPatientClaim", ReplyAction="http://tempuri.org/IPatientService/getRFARequestRecordsByPatientClaimResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.RFARequest[]> getRFARequestRecordsByPatientClaimAsync(string _patientClaim);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientPhysician", ReplyAction="http://tempuri.org/IPatientService/updatePatientPhysicianResponse")]
        int updatePatientPhysician(MMC.MMCService.PatientService.PatientClaim _patientClaim);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientPhysician", ReplyAction="http://tempuri.org/IPatientService/updatePatientPhysicianResponse")]
        System.Threading.Tasks.Task<int> updatePatientPhysicianAsync(MMC.MMCService.PatientService.PatientClaim _patientClaim);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getAllBodyPartsByClaimId", ReplyAction="http://tempuri.org/IPatientService/getAllBodyPartsByClaimIdResponse")]
        MMC.MMCService.PatientService.PagedBodyPartDetail getAllBodyPartsByClaimId(int _claimID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getAllBodyPartsByClaimId", ReplyAction="http://tempuri.org/IPatientService/getAllBodyPartsByClaimIdResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedBodyPartDetail> getAllBodyPartsByClaimIdAsync(int _claimID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getNotesByPatientID", ReplyAction="http://tempuri.org/IPatientService/getNotesByPatientIDResponse")]
        MMC.MMCService.PatientService.PagedNotesDetail getNotesByPatientID(int _patientID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getNotesByPatientID", ReplyAction="http://tempuri.org/IPatientService/getNotesByPatientIDResponse")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedNotesDetail> getNotesByPatientIDAsync(int _patientID, int _skip, int _take);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatientOccupational", ReplyAction="http://tempuri.org/IPatientService/addPatientOccupationalResponse")]
        int addPatientOccupational(MMC.MMCService.PatientService.PatientOccupational _patientOccupational);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/addPatientOccupational", ReplyAction="http://tempuri.org/IPatientService/addPatientOccupationalResponse")]
        System.Threading.Tasks.Task<int> addPatientOccupationalAsync(MMC.MMCService.PatientService.PatientOccupational _patientOccupational);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientOccupational", ReplyAction="http://tempuri.org/IPatientService/updatePatientOccupationalResponse")]
        int updatePatientOccupational(MMC.MMCService.PatientService.PatientOccupational _patientOccupational);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/updatePatientOccupational", ReplyAction="http://tempuri.org/IPatientService/updatePatientOccupationalResponse")]
        System.Threading.Tasks.Task<int> updatePatientOccupationalAsync(MMC.MMCService.PatientService.PatientOccupational _patientOccupational);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientOccupationalByPatientClaimID", ReplyAction="http://tempuri.org/IPatientService/getPatientOccupationalByPatientClaimIDResponse" +
            "")]
        MMC.MMCService.PatientService.PatientOccupational getPatientOccupationalByPatientClaimID(int _patientClaimID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/getPatientOccupationalByPatientClaimID", ReplyAction="http://tempuri.org/IPatientService/getPatientOccupationalByPatientClaimIDResponse" +
            "")]
        System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientOccupational> getPatientOccupationalByPatientClaimIDAsync(int _patientClaimID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPatientServiceChannel : MMC.MMCService.PatientService.IPatientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PatientServiceClient : System.ServiceModel.ClientBase<MMC.MMCService.PatientService.IPatientService>, MMC.MMCService.PatientService.IPatientService {
        
        public PatientServiceClient() {
        }
        
        public PatientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PatientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PatientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PatientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int addPatient(MMC.MMCService.PatientService.Patient _patient) {
            return base.Channel.addPatient(_patient);
        }
        
        public System.Threading.Tasks.Task<int> addPatientAsync(MMC.MMCService.PatientService.Patient _patient) {
            return base.Channel.addPatientAsync(_patient);
        }
        
        public int updatePatient(MMC.MMCService.PatientService.Patient _patient) {
            return base.Channel.updatePatient(_patient);
        }
        
        public System.Threading.Tasks.Task<int> updatePatientAsync(MMC.MMCService.PatientService.Patient _patient) {
            return base.Channel.updatePatientAsync(_patient);
        }
        
        public void deletePatient(int _patientId) {
            base.Channel.deletePatient(_patientId);
        }
        
        public System.Threading.Tasks.Task deletePatientAsync(int _patientId) {
            return base.Channel.deletePatientAsync(_patientId);
        }
        
        public MMC.MMCService.PatientService.Patient[] getpatientsAll() {
            return base.Channel.getpatientsAll();
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.Patient[]> getpatientsAllAsync() {
            return base.Channel.getpatientsAllAsync();
        }
        
        public MMC.MMCService.PatientService.Patient getPatientByID(int _patientId) {
            return base.Channel.getPatientByID(_patientId);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.Patient> getPatientByIDAsync(int _patientId) {
            return base.Channel.getPatientByIDAsync(_patientId);
        }
        
        public MMC.MMCService.PatientService.PagedPatient getPatientsByName(string SearchText, int _skip, int _take) {
            return base.Channel.getPatientsByName(SearchText, _skip, _take);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatient> getPatientsByNameAsync(string SearchText, int _skip, int _take) {
            return base.Channel.getPatientsByNameAsync(SearchText, _skip, _take);
        }
        
        public int addPatientCurrentMedicalCondition(MMC.MMCService.PatientService.PatientCurrentMedicalCondition _patientCurrentMedicalCondition) {
            return base.Channel.addPatientCurrentMedicalCondition(_patientCurrentMedicalCondition);
        }
        
        public System.Threading.Tasks.Task<int> addPatientCurrentMedicalConditionAsync(MMC.MMCService.PatientService.PatientCurrentMedicalCondition _patientCurrentMedicalCondition) {
            return base.Channel.addPatientCurrentMedicalConditionAsync(_patientCurrentMedicalCondition);
        }
        
        public int updatePatientCurrentMedicalCondition(MMC.MMCService.PatientService.PatientCurrentMedicalCondition _patientCurrentMedicalCondition) {
            return base.Channel.updatePatientCurrentMedicalCondition(_patientCurrentMedicalCondition);
        }
        
        public System.Threading.Tasks.Task<int> updatePatientCurrentMedicalConditionAsync(MMC.MMCService.PatientService.PatientCurrentMedicalCondition _patientCurrentMedicalCondition) {
            return base.Channel.updatePatientCurrentMedicalConditionAsync(_patientCurrentMedicalCondition);
        }
        
        public void deletePatientCurrentMedicalCondition(int _patientCurrentMedicalConditionID) {
            base.Channel.deletePatientCurrentMedicalCondition(_patientCurrentMedicalConditionID);
        }
        
        public System.Threading.Tasks.Task deletePatientCurrentMedicalConditionAsync(int _patientCurrentMedicalConditionID) {
            return base.Channel.deletePatientCurrentMedicalConditionAsync(_patientCurrentMedicalConditionID);
        }
        
        public MMC.MMCService.PatientService.PagedPatientCurrentMedicalCondition getpatientCurrentMedicalConditionByPatientId(int _patientID, int _skip, int _take) {
            return base.Channel.getpatientCurrentMedicalConditionByPatientId(_patientID, _skip, _take);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientCurrentMedicalCondition> getpatientCurrentMedicalConditionByPatientIdAsync(int _patientID, int _skip, int _take) {
            return base.Channel.getpatientCurrentMedicalConditionByPatientIdAsync(_patientID, _skip, _take);
        }
        
        public MMC.MMCService.PatientService.PatientCurrentMedicalCondition getpatientCurrentMedicalConditionByID(int _patientCurrentMedicalConditionID) {
            return base.Channel.getpatientCurrentMedicalConditionByID(_patientCurrentMedicalConditionID);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientCurrentMedicalCondition> getpatientCurrentMedicalConditionByIDAsync(int _patientCurrentMedicalConditionID) {
            return base.Channel.getpatientCurrentMedicalConditionByIDAsync(_patientCurrentMedicalConditionID);
        }
        
        public void deletePatientCurrentMedicalConditionByPatientID(int _patientID) {
            base.Channel.deletePatientCurrentMedicalConditionByPatientID(_patientID);
        }
        
        public System.Threading.Tasks.Task deletePatientCurrentMedicalConditionByPatientIDAsync(int _patientID) {
            return base.Channel.deletePatientCurrentMedicalConditionByPatientIDAsync(_patientID);
        }
        
        public int getPatientCurrentMedicalConditionByPatientAndCMCID(int _patientid, int _currentMedicalConditionId) {
            return base.Channel.getPatientCurrentMedicalConditionByPatientAndCMCID(_patientid, _currentMedicalConditionId);
        }
        
        public System.Threading.Tasks.Task<int> getPatientCurrentMedicalConditionByPatientAndCMCIDAsync(int _patientid, int _currentMedicalConditionId) {
            return base.Channel.getPatientCurrentMedicalConditionByPatientAndCMCIDAsync(_patientid, _currentMedicalConditionId);
        }
        
        public void UpdatePatientMedicareEligibleByID(int _patientid, string mode, int _currentMedicalConditionId) {
            base.Channel.UpdatePatientMedicareEligibleByID(_patientid, mode, _currentMedicalConditionId);
        }
        
        public System.Threading.Tasks.Task UpdatePatientMedicareEligibleByIDAsync(int _patientid, string mode, int _currentMedicalConditionId) {
            return base.Channel.UpdatePatientMedicareEligibleByIDAsync(_patientid, mode, _currentMedicalConditionId);
        }
        
        public int addPatientClaim(MMC.MMCService.PatientService.PatientClaim _patientClaim) {
            return base.Channel.addPatientClaim(_patientClaim);
        }
        
        public System.Threading.Tasks.Task<int> addPatientClaimAsync(MMC.MMCService.PatientService.PatientClaim _patientClaim) {
            return base.Channel.addPatientClaimAsync(_patientClaim);
        }
        
        public int updatePatientClaim(MMC.MMCService.PatientService.PatientClaim _patientClaim) {
            return base.Channel.updatePatientClaim(_patientClaim);
        }
        
        public System.Threading.Tasks.Task<int> updatePatientClaimAsync(MMC.MMCService.PatientService.PatientClaim _patientClaim) {
            return base.Channel.updatePatientClaimAsync(_patientClaim);
        }
        
        public void deletePatientClaim(int _patientClaimID) {
            base.Channel.deletePatientClaim(_patientClaimID);
        }
        
        public System.Threading.Tasks.Task deletePatientClaimAsync(int _patientClaimID) {
            return base.Channel.deletePatientClaimAsync(_patientClaimID);
        }
        
        public MMC.MMCService.PatientService.PagedPatientClaim getpatientClaimsByPatientID(int _patientID, int _skip, int _take) {
            return base.Channel.getpatientClaimsByPatientID(_patientID, _skip, _take);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientClaim> getpatientClaimsByPatientIDAsync(int _patientID, int _skip, int _take) {
            return base.Channel.getpatientClaimsByPatientIDAsync(_patientID, _skip, _take);
        }
        
        public MMC.MMCService.PatientService.PatientClaim[] getAllpatientClaimsByPatientID(int _patientID) {
            return base.Channel.getAllpatientClaimsByPatientID(_patientID);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientClaim[]> getAllpatientClaimsByPatientIDAsync(int _patientID) {
            return base.Channel.getAllpatientClaimsByPatientIDAsync(_patientID);
        }
        
        public MMC.MMCService.PatientService.PatientClaim getPatientClaimByID(int _patientClaimID) {
            return base.Channel.getPatientClaimByID(_patientClaimID);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientClaim> getPatientClaimByIDAsync(int _patientClaimID) {
            return base.Channel.getPatientClaimByIDAsync(_patientClaimID);
        }
        
        public MMC.MMCService.PatientService.PagedPatientClaim getpatientClaimsByName(string _searchText, int _skip, int _take) {
            return base.Channel.getpatientClaimsByName(_searchText, _skip, _take);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientClaim> getpatientClaimsByNameAsync(string _searchText, int _skip, int _take) {
            return base.Channel.getpatientClaimsByNameAsync(_searchText, _skip, _take);
        }
        
        public MMC.MMCService.PatientService.PagedPatientClaimBodyPartByBPStatusID getPatientClaimBodyPartByBPStatusID(int _patientClaimID, int _bodyPartStatusID, int _skip, int _take) {
            return base.Channel.getPatientClaimBodyPartByBPStatusID(_patientClaimID, _bodyPartStatusID, _skip, _take);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientClaimBodyPartByBPStatusID> getPatientClaimBodyPartByBPStatusIDAsync(int _patientClaimID, int _bodyPartStatusID, int _skip, int _take) {
            return base.Channel.getPatientClaimBodyPartByBPStatusIDAsync(_patientClaimID, _bodyPartStatusID, _skip, _take);
        }
        
        public int addPatientClaimAddOnBodyPart(MMC.MMCService.PatientService.PatientClaimAddOnBodyPart _patientClaimAddOnBodyPart) {
            return base.Channel.addPatientClaimAddOnBodyPart(_patientClaimAddOnBodyPart);
        }
        
        public System.Threading.Tasks.Task<int> addPatientClaimAddOnBodyPartAsync(MMC.MMCService.PatientService.PatientClaimAddOnBodyPart _patientClaimAddOnBodyPart) {
            return base.Channel.addPatientClaimAddOnBodyPartAsync(_patientClaimAddOnBodyPart);
        }
        
        public int updatePatientClaimAddOnBodyPart(MMC.MMCService.PatientService.PatientClaimAddOnBodyPart _patientClaimAddOnBodyPart) {
            return base.Channel.updatePatientClaimAddOnBodyPart(_patientClaimAddOnBodyPart);
        }
        
        public System.Threading.Tasks.Task<int> updatePatientClaimAddOnBodyPartAsync(MMC.MMCService.PatientService.PatientClaimAddOnBodyPart _patientClaimAddOnBodyPart) {
            return base.Channel.updatePatientClaimAddOnBodyPartAsync(_patientClaimAddOnBodyPart);
        }
        
        public void deletePatientClaimAddOnBodyPart(int _patientAddOnBodyPartID) {
            base.Channel.deletePatientClaimAddOnBodyPart(_patientAddOnBodyPartID);
        }
        
        public System.Threading.Tasks.Task deletePatientClaimAddOnBodyPartAsync(int _patientAddOnBodyPartID) {
            return base.Channel.deletePatientClaimAddOnBodyPartAsync(_patientAddOnBodyPartID);
        }
        
        public MMC.MMCService.PatientService.PagedPatientClaimAddOnBodyPart getPatientClaimAddOnBodyPartByPatientClaimId(int _patientclaimID, int _skip, int _take) {
            return base.Channel.getPatientClaimAddOnBodyPartByPatientClaimId(_patientclaimID, _skip, _take);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientClaimAddOnBodyPart> getPatientClaimAddOnBodyPartByPatientClaimIdAsync(int _patientclaimID, int _skip, int _take) {
            return base.Channel.getPatientClaimAddOnBodyPartByPatientClaimIdAsync(_patientclaimID, _skip, _take);
        }
        
        public MMC.MMCService.PatientService.PatientClaimAddOnBodyPart getPatientClaimAddOnBodyPartByID(int _patientAddOnBodyPartID) {
            return base.Channel.getPatientClaimAddOnBodyPartByID(_patientAddOnBodyPartID);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientClaimAddOnBodyPart> getPatientClaimAddOnBodyPartByIDAsync(int _patientAddOnBodyPartID) {
            return base.Channel.getPatientClaimAddOnBodyPartByIDAsync(_patientAddOnBodyPartID);
        }
        
        public void deletePatientClaimAddOnBodyPartByPatientClaimID(int _patientClaimID) {
            base.Channel.deletePatientClaimAddOnBodyPartByPatientClaimID(_patientClaimID);
        }
        
        public System.Threading.Tasks.Task deletePatientClaimAddOnBodyPartByPatientClaimIDAsync(int _patientClaimID) {
            return base.Channel.deletePatientClaimAddOnBodyPartByPatientClaimIDAsync(_patientClaimID);
        }
        
        public int addPatientClaimPleadBodyPart(MMC.MMCService.PatientService.PatientClaimPleadBodyPart _patientClaimPleadBodyPart) {
            return base.Channel.addPatientClaimPleadBodyPart(_patientClaimPleadBodyPart);
        }
        
        public System.Threading.Tasks.Task<int> addPatientClaimPleadBodyPartAsync(MMC.MMCService.PatientService.PatientClaimPleadBodyPart _patientClaimPleadBodyPart) {
            return base.Channel.addPatientClaimPleadBodyPartAsync(_patientClaimPleadBodyPart);
        }
        
        public int updatePatientClaimPleadBodyPart(MMC.MMCService.PatientService.PatientClaimPleadBodyPart _patientClaimPleadBodyPart) {
            return base.Channel.updatePatientClaimPleadBodyPart(_patientClaimPleadBodyPart);
        }
        
        public System.Threading.Tasks.Task<int> updatePatientClaimPleadBodyPartAsync(MMC.MMCService.PatientService.PatientClaimPleadBodyPart _patientClaimPleadBodyPart) {
            return base.Channel.updatePatientClaimPleadBodyPartAsync(_patientClaimPleadBodyPart);
        }
        
        public void deletePatientClaimPleadBodyPart(int _patientClaimPleadBodyPartID) {
            base.Channel.deletePatientClaimPleadBodyPart(_patientClaimPleadBodyPartID);
        }
        
        public System.Threading.Tasks.Task deletePatientClaimPleadBodyPartAsync(int _patientClaimPleadBodyPartID) {
            return base.Channel.deletePatientClaimPleadBodyPartAsync(_patientClaimPleadBodyPartID);
        }
        
        public MMC.MMCService.PatientService.PagedPatientClaimPleadBodyPart getPatientClaimPleadBodyPartByPatientClaimId(int _patientclaimID, int _skip, int _take) {
            return base.Channel.getPatientClaimPleadBodyPartByPatientClaimId(_patientclaimID, _skip, _take);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientClaimPleadBodyPart> getPatientClaimPleadBodyPartByPatientClaimIdAsync(int _patientclaimID, int _skip, int _take) {
            return base.Channel.getPatientClaimPleadBodyPartByPatientClaimIdAsync(_patientclaimID, _skip, _take);
        }
        
        public MMC.MMCService.PatientService.PatientClaimPleadBodyPart getPatientClaimPleadBodyPartByID(int _patientClaimPleadBodyPartID) {
            return base.Channel.getPatientClaimPleadBodyPartByID(_patientClaimPleadBodyPartID);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientClaimPleadBodyPart> getPatientClaimPleadBodyPartByIDAsync(int _patientClaimPleadBodyPartID) {
            return base.Channel.getPatientClaimPleadBodyPartByIDAsync(_patientClaimPleadBodyPartID);
        }
        
        public void deletePatientClaimPleadBodyPartByPatientClaimID(int _patientClaimID) {
            base.Channel.deletePatientClaimPleadBodyPartByPatientClaimID(_patientClaimID);
        }
        
        public System.Threading.Tasks.Task deletePatientClaimPleadBodyPartByPatientClaimIDAsync(int _patientClaimID) {
            return base.Channel.deletePatientClaimPleadBodyPartByPatientClaimIDAsync(_patientClaimID);
        }
        
        public void updatePatientClaimPleadBodyPartByPatientClaimID(int _patientClaimID, int _bodyPartStatusID) {
            base.Channel.updatePatientClaimPleadBodyPartByPatientClaimID(_patientClaimID, _bodyPartStatusID);
        }
        
        public System.Threading.Tasks.Task updatePatientClaimPleadBodyPartByPatientClaimIDAsync(int _patientClaimID, int _bodyPartStatusID) {
            return base.Channel.updatePatientClaimPleadBodyPartByPatientClaimIDAsync(_patientClaimID, _bodyPartStatusID);
        }
        
        public int addPatientClaimDiagnose(MMC.MMCService.PatientService.PatientClaimDiagnose _patientClaimDiagnose) {
            return base.Channel.addPatientClaimDiagnose(_patientClaimDiagnose);
        }
        
        public System.Threading.Tasks.Task<int> addPatientClaimDiagnoseAsync(MMC.MMCService.PatientService.PatientClaimDiagnose _patientClaimDiagnose) {
            return base.Channel.addPatientClaimDiagnoseAsync(_patientClaimDiagnose);
        }
        
        public int updatePatientClaimDiagnose(MMC.MMCService.PatientService.PatientClaimDiagnose _patientClaimDiagnose) {
            return base.Channel.updatePatientClaimDiagnose(_patientClaimDiagnose);
        }
        
        public System.Threading.Tasks.Task<int> updatePatientClaimDiagnoseAsync(MMC.MMCService.PatientService.PatientClaimDiagnose _patientClaimDiagnose) {
            return base.Channel.updatePatientClaimDiagnoseAsync(_patientClaimDiagnose);
        }
        
        public void deletePatientClaimDiagnose(int _patientClaimDiagnoseID) {
            base.Channel.deletePatientClaimDiagnose(_patientClaimDiagnoseID);
        }
        
        public System.Threading.Tasks.Task deletePatientClaimDiagnoseAsync(int _patientClaimDiagnoseID) {
            return base.Channel.deletePatientClaimDiagnoseAsync(_patientClaimDiagnoseID);
        }
        
        public MMC.MMCService.PatientService.PagedPatientClaimDiagnose getPatientClaimDiagnoseByPatientClaimId(int _patientclaimID, int _skip, int _take) {
            return base.Channel.getPatientClaimDiagnoseByPatientClaimId(_patientclaimID, _skip, _take);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientClaimDiagnose> getPatientClaimDiagnoseByPatientClaimIdAsync(int _patientclaimID, int _skip, int _take) {
            return base.Channel.getPatientClaimDiagnoseByPatientClaimIdAsync(_patientclaimID, _skip, _take);
        }
        
        public MMC.MMCService.PatientService.PatientClaimDiagnose[] getPatientClaimDiagnoseByPatientClaimIdAll(int _patientClaimID) {
            return base.Channel.getPatientClaimDiagnoseByPatientClaimIdAll(_patientClaimID);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientClaimDiagnose[]> getPatientClaimDiagnoseByPatientClaimIdAllAsync(int _patientClaimID) {
            return base.Channel.getPatientClaimDiagnoseByPatientClaimIdAllAsync(_patientClaimID);
        }
        
        public MMC.MMCService.PatientService.PatientClaimDiagnose getPatientClaimDiagnoseByID(int _patientClaimDiagnoseID) {
            return base.Channel.getPatientClaimDiagnoseByID(_patientClaimDiagnoseID);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientClaimDiagnose> getPatientClaimDiagnoseByIDAsync(int _patientClaimDiagnoseID) {
            return base.Channel.getPatientClaimDiagnoseByIDAsync(_patientClaimDiagnoseID);
        }
        
        public void deletePatientClaimDiagnosePatientClaimID(int _patientClaimID) {
            base.Channel.deletePatientClaimDiagnosePatientClaimID(_patientClaimID);
        }
        
        public System.Threading.Tasks.Task deletePatientClaimDiagnosePatientClaimIDAsync(int _patientClaimID) {
            return base.Channel.deletePatientClaimDiagnosePatientClaimIDAsync(_patientClaimID);
        }
        
        public int addPatientClaimStatus(MMC.MMCService.PatientService.PatientClaimStatus _patientClaimStatus) {
            return base.Channel.addPatientClaimStatus(_patientClaimStatus);
        }
        
        public System.Threading.Tasks.Task<int> addPatientClaimStatusAsync(MMC.MMCService.PatientService.PatientClaimStatus _patientClaimStatus) {
            return base.Channel.addPatientClaimStatusAsync(_patientClaimStatus);
        }
        
        public int updatePatientClaimStatus(MMC.MMCService.PatientService.PatientClaimStatus _patientClaimStatus) {
            return base.Channel.updatePatientClaimStatus(_patientClaimStatus);
        }
        
        public System.Threading.Tasks.Task<int> updatePatientClaimStatusAsync(MMC.MMCService.PatientService.PatientClaimStatus _patientClaimStatus) {
            return base.Channel.updatePatientClaimStatusAsync(_patientClaimStatus);
        }
        
        public int updateDeniedRationale(MMC.MMCService.PatientService.PatientClaimStatus _patientClaimStatus) {
            return base.Channel.updateDeniedRationale(_patientClaimStatus);
        }
        
        public System.Threading.Tasks.Task<int> updateDeniedRationaleAsync(MMC.MMCService.PatientService.PatientClaimStatus _patientClaimStatus) {
            return base.Channel.updateDeniedRationaleAsync(_patientClaimStatus);
        }
        
        public void deletePatientClaimStatus(int _patientClaimStatusID) {
            base.Channel.deletePatientClaimStatus(_patientClaimStatusID);
        }
        
        public System.Threading.Tasks.Task deletePatientClaimStatusAsync(int _patientClaimStatusID) {
            return base.Channel.deletePatientClaimStatusAsync(_patientClaimStatusID);
        }
        
        public MMC.MMCService.PatientService.PagedPatientClaimStatus getPatientClaimStatusByPatientClaimId(int _patientClaimID, int _skip, int _take) {
            return base.Channel.getPatientClaimStatusByPatientClaimId(_patientClaimID, _skip, _take);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientClaimStatus> getPatientClaimStatusByPatientClaimIdAsync(int _patientClaimID, int _skip, int _take) {
            return base.Channel.getPatientClaimStatusByPatientClaimIdAsync(_patientClaimID, _skip, _take);
        }
        
        public MMC.MMCService.PatientService.PatientClaimStatus getPatientClaimStatusByID(int _patientClaimStatusID) {
            return base.Channel.getPatientClaimStatusByID(_patientClaimStatusID);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientClaimStatus> getPatientClaimStatusByIDAsync(int _patientClaimStatusID) {
            return base.Channel.getPatientClaimStatusByIDAsync(_patientClaimStatusID);
        }
        
        public MMC.MMCService.PatientService.PatientClaimStatus getPatientClaimStatusByRefferalID(int _rfaRefferalID) {
            return base.Channel.getPatientClaimStatusByRefferalID(_rfaRefferalID);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientClaimStatus> getPatientClaimStatusByRefferalIDAsync(int _rfaRefferalID) {
            return base.Channel.getPatientClaimStatusByRefferalIDAsync(_rfaRefferalID);
        }
        
        public void deletePatientClaimStatusPatientClaimID(int _patientClaimID) {
            base.Channel.deletePatientClaimStatusPatientClaimID(_patientClaimID);
        }
        
        public System.Threading.Tasks.Task deletePatientClaimStatusPatientClaimIDAsync(int _patientClaimID) {
            return base.Channel.deletePatientClaimStatusPatientClaimIDAsync(_patientClaimID);
        }
        
        public int addPatientMedicalRecords(MMC.MMCService.PatientService.PatientMedicalRecord PatientMedicalRecord) {
            return base.Channel.addPatientMedicalRecords(PatientMedicalRecord);
        }
        
        public System.Threading.Tasks.Task<int> addPatientMedicalRecordsAsync(MMC.MMCService.PatientService.PatientMedicalRecord PatientMedicalRecord) {
            return base.Channel.addPatientMedicalRecordsAsync(PatientMedicalRecord);
        }
        
        public int updatePatientMedicalRecords(MMC.MMCService.PatientService.PatientMedicalRecord _medicalRecord) {
            return base.Channel.updatePatientMedicalRecords(_medicalRecord);
        }
        
        public System.Threading.Tasks.Task<int> updatePatientMedicalRecordsAsync(MMC.MMCService.PatientService.PatientMedicalRecord _medicalRecord) {
            return base.Channel.updatePatientMedicalRecordsAsync(_medicalRecord);
        }
        
        public int updatePatientMedicalRecordsForMedicalRec(MMC.MMCService.PatientService.PatientMedicalRecord _medicalRecord) {
            return base.Channel.updatePatientMedicalRecordsForMedicalRec(_medicalRecord);
        }
        
        public System.Threading.Tasks.Task<int> updatePatientMedicalRecordsForMedicalRecAsync(MMC.MMCService.PatientService.PatientMedicalRecord _medicalRecord) {
            return base.Channel.updatePatientMedicalRecordsForMedicalRecAsync(_medicalRecord);
        }
        
        public MMC.MMCService.PatientService.PatientMedicalRecord[] getpatientsMedicalRecordAll() {
            return base.Channel.getpatientsMedicalRecordAll();
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientMedicalRecord[]> getpatientsMedicalRecordAllAsync() {
            return base.Channel.getpatientsMedicalRecordAllAsync();
        }
        
        public MMC.MMCService.PatientService.PatientMedicalRecord getPatientMedicalRecordByID(int _id) {
            return base.Channel.getPatientMedicalRecordByID(_id);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientMedicalRecord> getPatientMedicalRecordByIDAsync(int _id) {
            return base.Channel.getPatientMedicalRecordByIDAsync(_id);
        }
        
        public MMC.MMCService.PatientService.PatientMedicalRecord[] getMedicalRecordSplittingByPatientID(int _patientID) {
            return base.Channel.getMedicalRecordSplittingByPatientID(_patientID);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientMedicalRecord[]> getMedicalRecordSplittingByPatientIDAsync(int _patientID) {
            return base.Channel.getMedicalRecordSplittingByPatientIDAsync(_patientID);
        }
        
        public MMC.MMCService.PatientService.PagedPatientMedicalRecordByPatientID getPatientMedicalRecordByPatientID(int _patientID, int _skip, int _take, string _sortBy, string _order) {
            return base.Channel.getPatientMedicalRecordByPatientID(_patientID, _skip, _take, _sortBy, _order);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedPatientMedicalRecordByPatientID> getPatientMedicalRecordByPatientIDAsync(int _patientID, int _skip, int _take, string _sortBy, string _order) {
            return base.Channel.getPatientMedicalRecordByPatientIDAsync(_patientID, _skip, _take, _sortBy, _order);
        }
        
        public MMC.MMCService.PatientService.PatientMedicalRecordTemplateByPatientID getPatientMedicalRecordTemplateByPatientID(int _patientID) {
            return base.Channel.getPatientMedicalRecordTemplateByPatientID(_patientID);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientMedicalRecordTemplateByPatientID> getPatientMedicalRecordTemplateByPatientIDAsync(int _patientID) {
            return base.Channel.getPatientMedicalRecordTemplateByPatientIDAsync(_patientID);
        }
        
        public MMC.MMCService.PatientService.PatientMedicalRecordByPatientID[] GetPatientMedicalRecordMultipleTemplateByPatientID(int _patientID) {
            return base.Channel.GetPatientMedicalRecordMultipleTemplateByPatientID(_patientID);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientMedicalRecordByPatientID[]> GetPatientMedicalRecordMultipleTemplateByPatientIDAsync(int _patientID) {
            return base.Channel.GetPatientMedicalRecordMultipleTemplateByPatientIDAsync(_patientID);
        }
        
        public MMC.MMCService.PatientService.RFARequest[] getRFARequestRecordsByPatientClaim(string _patientClaim) {
            return base.Channel.getRFARequestRecordsByPatientClaim(_patientClaim);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.RFARequest[]> getRFARequestRecordsByPatientClaimAsync(string _patientClaim) {
            return base.Channel.getRFARequestRecordsByPatientClaimAsync(_patientClaim);
        }
        
        public int updatePatientPhysician(MMC.MMCService.PatientService.PatientClaim _patientClaim) {
            return base.Channel.updatePatientPhysician(_patientClaim);
        }
        
        public System.Threading.Tasks.Task<int> updatePatientPhysicianAsync(MMC.MMCService.PatientService.PatientClaim _patientClaim) {
            return base.Channel.updatePatientPhysicianAsync(_patientClaim);
        }
        
        public MMC.MMCService.PatientService.PagedBodyPartDetail getAllBodyPartsByClaimId(int _claimID, int _skip, int _take) {
            return base.Channel.getAllBodyPartsByClaimId(_claimID, _skip, _take);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedBodyPartDetail> getAllBodyPartsByClaimIdAsync(int _claimID, int _skip, int _take) {
            return base.Channel.getAllBodyPartsByClaimIdAsync(_claimID, _skip, _take);
        }
        
        public MMC.MMCService.PatientService.PagedNotesDetail getNotesByPatientID(int _patientID, int _skip, int _take) {
            return base.Channel.getNotesByPatientID(_patientID, _skip, _take);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PagedNotesDetail> getNotesByPatientIDAsync(int _patientID, int _skip, int _take) {
            return base.Channel.getNotesByPatientIDAsync(_patientID, _skip, _take);
        }
        
        public int addPatientOccupational(MMC.MMCService.PatientService.PatientOccupational _patientOccupational) {
            return base.Channel.addPatientOccupational(_patientOccupational);
        }
        
        public System.Threading.Tasks.Task<int> addPatientOccupationalAsync(MMC.MMCService.PatientService.PatientOccupational _patientOccupational) {
            return base.Channel.addPatientOccupationalAsync(_patientOccupational);
        }
        
        public int updatePatientOccupational(MMC.MMCService.PatientService.PatientOccupational _patientOccupational) {
            return base.Channel.updatePatientOccupational(_patientOccupational);
        }
        
        public System.Threading.Tasks.Task<int> updatePatientOccupationalAsync(MMC.MMCService.PatientService.PatientOccupational _patientOccupational) {
            return base.Channel.updatePatientOccupationalAsync(_patientOccupational);
        }
        
        public MMC.MMCService.PatientService.PatientOccupational getPatientOccupationalByPatientClaimID(int _patientClaimID) {
            return base.Channel.getPatientOccupationalByPatientClaimID(_patientClaimID);
        }
        
        public System.Threading.Tasks.Task<MMC.MMCService.PatientService.PatientOccupational> getPatientOccupationalByPatientClaimIDAsync(int _patientClaimID) {
            return base.Channel.getPatientOccupationalByPatientClaimIDAsync(_patientClaimID);
        }
    }
}
